#!/bin/bash
clear
red()    { echo -e "\033[31m\033[01m $1 \033[0m"; }
green()  { echo -e "\033[32m\033[01m $1 \033[0m"; }
yellow() { echo -e "\033[33m\033[01m $1 \033[0m"; }
blue()   { echo -e "\033[34m\033[01m $1 \033[0m"; }
cyan()   { echo -e "\033[36m\033[01m $1 \033[0m"; }
white()  { echo -e "\033[37m\033[01m $1 \033[0m"; }



jellyfinNginxConf(){
cat << EOF >/etc/nginx/conf.d/jellyfin.conf
server {
  listen 8097 ssl http2 fastopen=128 reuseport;
  root /var/www/html;
  
  ssl_certificate /var/www/ssl/de_GWD.cer;
  ssl_certificate_key /var/www/ssl/de_GWD.key;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ecdh_curve CECPQ2:X25519:P-256;
  ssl_prefer_server_ciphers off;
  ssl_ciphers [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]:[ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;
  ssl_session_timeout 10m;
  ssl_session_cache builtin:1000 shared:SSL:10m;
  ssl_buffer_size 4k;

  ssl_early_data on;
  proxy_set_header Early-Data \$ssl_early_data;

  add_header Referrer-Policy                    "no-referrer"       always;
  add_header X-Content-Type-Options             "nosniff"           always;
  add_header X-Download-Options                 "noopen"            always;
  add_header X-Frame-Options                    "SAMEORIGIN"        always;
  add_header X-Permitted-Cross-Domain-Policies  "none"              always;
  add_header X-Robots-Tag                       "none"              always;
  add_header X-XSS-Protection                   "1; mode=block"     always;
  add_header Strict-Transport-Security          "max-age=63072000"  always;

location = / {
  return 302 https://\$host:8097/web/;
}

location / {
  proxy_pass                            http://127.0.0.1:8096;
  proxy_set_header Host                 \$host;
  proxy_set_header X-Real-IP            \$remote_addr;
  proxy_set_header X-Forwarded-For      \$proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto    \$scheme;
  proxy_set_header X-Forwarded-Protocol \$scheme;
  proxy_set_header X-Forwarded-Host     \$http_host;
  proxy_buffering  off;
}

location = /web/ {
  proxy_pass                            http://127.0.0.1:8096/web/index.html;
  proxy_set_header Host                 \$host;
  proxy_set_header X-Real-IP            \$remote_addr;
  proxy_set_header X-Forwarded-For      \$proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto    \$scheme;
  proxy_set_header X-Forwarded-Protocol \$scheme;
  proxy_set_header X-Forwarded-Host     \$http_host;
}

location /socket {
  proxy_pass                            http://127.0.0.1:8096/socket;
  proxy_http_version                    1.1;
  proxy_set_header Upgrade              \$http_upgrade;
  proxy_set_header Connection           "upgrade";
  proxy_set_header Host                 \$host;
  proxy_set_header X-Real-IP            \$remote_addr;
  proxy_set_header X-Forwarded-For      \$proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto    \$scheme;
  proxy_set_header X-Forwarded-Protocol \$scheme;
  proxy_set_header X-Forwarded-Host     \$http_host;
}

}
EOF
systemctl force-reload nginx >/dev/null
}



installJellyfin(){
mkdir -p /opt/jellyfin/config
mkdir -p /opt/jellyfin/cache

docker pull nyanmisaka/jellyfin:latest
docker run -d \
 --name jellyfin \
 --net=host \
 --volume /opt/jellyfin/config:/config \
 --volume /opt/jellyfin/cache:/cache \
 --mount type=bind,source=/mnt,target=/media \
 --restart=unless-stopped \
 nyanmisaka/jellyfin:latest

jellyfinNginxConf

jq '.app.jellyfin="installed"' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
chmod 666 /opt/de_GWD/0conf

blue "-----------------------"
blue "Install Jellyfin [done]"
blue "-----------------------"
}



uninstallJellyfin(){
docker stop jellyfin >/dev/null 2>&1
docker rm jellyfin >/dev/null 2>&1
docker image ls 2>/dev/null | awk '/jellyfin/{print$3}' | while read line
do
docker rmi $line >/dev/null 2>&1
done

rm -rf /etc/nginx/conf.d/jellyfin.conf
systemctl force-reload nginx >/dev/null

rm -rf /opt/jellyfin
jq 'del(.app.jellyfin)' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
chmod 666 /opt/de_GWD/0conf

blue "-------------------------"
blue "Uninstall Jellyfin [done]"
blue "-------------------------"
}



updateJellyfin(){
mkdir -p /opt/jellyfin/config
mkdir -p /opt/jellyfin/cache

docker pull nyanmisaka/jellyfin:latest

docker stop jellyfin
docker rm jellyfin

docker run -d \
 --name jellyfin \
 --net=host \
 --volume /opt/jellyfin/config:/config \
 --volume /opt/jellyfin/cache:/cache \
 --mount type=bind,source=/mnt,target=/media \
 --restart=unless-stopped \
 nyanmisaka/jellyfin:latest

jellyfinNginxConf

docker system prune -f
blue "----------------------"
blue "Update Jellyfin [done]"
blue "----------------------"
}



start_menu(){
[[ -f "/usr/share/keyrings/jellyfin-archive-keyring.gpg" ]] && rm -rf /usr/share/keyrings/jellyfin-archive-keyring.gpg
[[ -f "/etc/apt/sources.list.d/jellyfin.list" ]] && rm -rf /etc/apt/sources.list.d/jellyfin.list

unset aptPKG
[[ -n $(dpkg -l | awk '{print$2}' | grep '^jellyfin$') ]] && aptPKG+=(jellyfin)
[[ -n $(dpkg -l | awk '{print$2}' | grep '^jellyfin-ffmpeg$') ]] && aptPKG+=(jellyfin-ffmpeg)
[[ -n $(dpkg -l | awk '{print$2}' | grep '^jellyfin-server$') ]] && aptPKG+=(jellyfin-server)
[[ -n $(dpkg -l | awk '{print$2}' | grep '^jellyfin-web$') ]] && aptPKG+=(jellyfin-web)
[[ -n $aptPKG ]] && apt update && apt --purge autoremove  $(echo ${aptPKG[@]})

    green "==============================="
    green "         Jellyfin"
    green "==============================="
    green  "1. Install Jellyfin"
    yellow "2. Uninstall Jellyfin"
    green  "0. Update Jellyfin"
    echo ""
    read -p "Select:" num
    case "$num" in
    1)
    installJellyfin
    start_menu
    ;;
    2)
    uninstallJellyfin
    start_menu
    ;;
    0)
    updateJellyfin
    start_menu
    ;;
    *)
    clear
    red "Wrong number"
    sleep 1s
    start_menu
    ;;
    esac
}

start_menu