#!/bin/bash
unset shttps
shttps[0]=$(grep 'server-https ' /etc/smartdns/smartdns.conf | awk NR==1)
shttps[1]=$(grep 'server-https ' /etc/smartdns/smartdns.conf | awk NR==2)
doh1IP0=$(echo ${shttps[0]} | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | sed '/^\s*$/d')
doh2IP0=$(echo ${shttps[1]} | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | sed '/^\s*$/d')

[[ -f "/opt/de_GWD/xDNSc/config.json" ]] && xDNScDomainO=$(jq -r '.outbounds[0].settings.vnext[0].address' /opt/de_GWD/xDNSc/config.json 2>/dev/null | grep -v '^null$')
[[ -f "/opt/de_GWD/xDNSc/config.json" ]] && xDNScIPO=$(jq -r --arg xDNScDomainO "$xDNScDomainO" '.dns.hosts."\($xDNScDomainO)"' /opt/de_GWD/xDNSc/config.json 2>/dev/null | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}')


doh1=$(jq -r '.dns.DOH[]' /opt/de_GWD/0conf 2>/dev/null | grep "/dq" | awk NR==1)
doh2=$(jq -r '.dns.DOH[]' /opt/de_GWD/0conf 2>/dev/null | grep "/dq" | awk NR==2)

[[ -n $doh1 ]] && doh1Domain=$(echo $doh1 | cut -d/ -f1 | cut -d: -f1)
[[ -n $doh2 ]] && doh2Domain=$(echo $doh2 | cut -d/ -f1 | cut -d: -f1)

[[ -n $doh1 ]] && doh1IP=$(dig @127.0.0.1 $doh1Domain -4p 5311 +short  | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | xargs -n 1 | awk NR==1)
[[ -n $doh2 ]] && doh2IP=$(dig @127.0.0.1 $doh2Domain -4p 5311 +short  | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | xargs -n 1 | awk NR==1)

[[ -n $doh1 ]] && doh1Port=$(echo $doh1 | cut -d/ -f1 | cut -d: -f2 | grep '^[[:digit:]]*$')
[[ -n $doh2 ]] && doh2Port=$(echo $doh2 | cut -d/ -f1 | cut -d: -f2 | grep '^[[:digit:]]*$')

[[ -n $doh1 ]] && doh1PortStr=$([[ -n $doh1Port ]] && echo $doh1Port | sed 's/^/:/')
[[ -n $doh2 ]] && doh2PortStr=$([[ -n $doh2Port ]] && echo $doh2Port | sed 's/^/:/')

xDNSc=$(jq -r '.dns.xDNS' /opt/de_GWD/0conf 2>/dev/null | grep -v "/dq")
[[ -n $xDNSc ]] && xDNScDomain=$(echo $xDNSc | cut -d: -f1)
[[ -n $xDNSc ]] && xDNScPort=$(echo $xDNSc | cut -d: -f2 | grep '^[[:digit:]]*$')
[[ -n $xDNSc ]] && xDNScIP=$(dig @127.0.0.1 $xDNScDomain -4p 5310 +short  | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | xargs -n 1 | awk NR==1)



if [[ -n $xDNScIP ]] && [[ $xDNScIP != $xDNScIPO ]]; then
cat << EOF >/opt/de_GWD/xDNSc/config.json
{
  "dns":{
    "tag":"dnsFlow",
    "hosts":{"$xDNScDomain":"$xDNScIP"},
    "servers":[{"address":"127.0.0.1","port":53}]
  },
  "routing":{
    "rules":[
      {"type":"field","inboundTag":["xDNScIN"],"outboundTag":"xDNScOUT"},
      {"type":"field","inboundTag":["dnsFlow"],"outboundTag":"direct"}
    ]
  },
  "inbounds": [
    {
      "tag":"xDNScIN",
      "port":5330,
      "listen":"127.0.0.1",
      "protocol":"dokodemo-door",
      "settings":{"address":"127.0.0.1","network":"tcp,udp"},
      "streamSettings":{"sockopt":{"tcpFastOpen":true}}
    }
  ],
  "outbounds": [
    {
      "tag": "xDNScOUT",
      "protocol": "vless",
      "settings": {
        "vnext": [
          {
            "address": "$xDNScDomain",
            "port": $xDNScPort,
            "users": [
              {
                "id": "ccabd6d0-beb2-4b8a-8f94-45f3dc235ebe",
                "encryption": "none",
                "flow": "xtls-rprx-splice",
                "level": 0
              }
            ]
          }
        ]
      },
      "streamSettings": {
        "network": "tcp",
        "security": "xtls",
        "xtlsSettings": {
          "serverName": "$xDNScDomain",
          "allowInsecure": false
        },
        "sockopt": {
          "tcpFastOpen": true,
          "tproxy": "off",
          "mark": 255,
          "domainStrategy": "UseIP"
        }
      }
    },
    {
      "tag":"direct",
      "protocol":"freedom",
      "streamSettings":{"sockopt":{"tcpFastOpen":true,"tproxy":"off","mark":255}}
    }
  ]
}
EOF

systemctl restart xDNSc >/dev/null
systemctl enable xDNSc >/dev/null 2>&1
elif [[ -z $xDNScIP ]]; then
sed -i '/server 127.0.0.1:5330/d' /etc/smartdns/smartdns.conf
systemctl disable xDNSc >/dev/null 2>&1
systemctl stop xDNSc >/dev/null
rm -rf /opt/de_GWD/xDNSc/config.json
fi



n=$[$(sed -n '/serve-expired-reply-ttl/=' /etc/smartdns/smartdns.conf)+1]
sed -i "$n,\$d" /etc/smartdns/smartdns.conf

if [[ -z $(jq -r '.dns.china' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$') ]]; then
  jq --arg dnsChina "114.114.114.114 114.114.115.115 119.29.29.29 119.28.28.28 182.254.118.118 223.5.5.5 223.6.6.6" '.dns.china=$dnsChina' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
  chmod 666 /opt/de_GWD/0conf
fi

echo >>/etc/smartdns/smartdns.conf
for dnsChina in $(jq -r '.dns.china' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$'); do
    echo "server $dnsChina" >>/etc/smartdns/smartdns.conf
done

[[ -n $xDNSc ]] && echo "server 127.0.0.1:5330 -exclude-default-group -group xDNS" >>/etc/smartdns/smartdns.conf

if [[ -n $doh1IP ]]; then
echo "server-https https://$doh1IP$doh1PortStr/dq -host-name $doh1Domain -exclude-default-group -group xDNS" >>/etc/smartdns/smartdns.conf
else
echo ${shttps[0]} >>/etc/smartdns/smartdns.conf
fi

if [[ -n $doh2IP ]]; then
echo "server-https https://$doh2IP$doh2PortStr/dq -host-name $doh2Domain -exclude-default-group -group xDNS" >>/etc/smartdns/smartdns.conf
else
echo ${shttps[1]} >>/etc/smartdns/smartdns.conf
fi



if [[ $xDNScIP != $xDNScIPO ]] || [[ $doh1IP != $doh1IP0 ]] || [[ $doh2IP != $doh2IP0 ]]; then
systemctl restart smartdns >/dev/null
fi

echo $doh1IP $doh2IP $xDNScIP | xargs -n 1 | sort | uniq >/opt/de_GWD/IPxDNS
sed -i '/^\s*$/d' /opt/de_GWD/IPxDNS
sed -i 's/^/add doh &/g' /opt/de_GWD/IPxDNS
mv -f /opt/de_GWD/IPxDNS /opt/de_GWD/IPxDNSSET
ipset -! -R </opt/de_GWD/IPxDNSSET
