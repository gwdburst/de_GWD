#!/bin/bash
RED='\E[1;31m'
GREEN='\E[1;32m'
YELLOW='\E[1;33m'
BLUE='\E[1;34m'
PURPLE='\E[1;35m'
CYAN='\E[1;36m'
WHITE='\E[1;37m'
cRES='\E[0m'



echo -e "${WHITE}[...]\c" && echo -e "\t${WHITE}DNS Split${cRES}\r\c"
/opt/de_GWD/ui-NodeSave

/opt/de_GWD/ui-submitListBW



cat << EOF >/opt/de_GWD/mosdns/forwarders.yaml
plugins:
  - tag: forward_chn
    type: fast_forward
    args:
      upstream:
        - addr: "127.0.0.1:5331"
          trusted: true
          so_mark: 255

  - tag: forward_global
    type: fast_forward
    args:
      upstream:
        - addr: "127.0.0.1:5332"
          trusted: true
          so_mark: 255
EOF



cat << EOF >/opt/de_GWD/mosdns/matchers_hosts.yaml
plugins:
  - tag: hosts
    type: hosts
    args:
      hosts:
        - localhost 127.0.0.1
EOF

[[ -n $doh1IP ]] && yq eval -i ".plugins.[0].args.hosts += [\"$doh1Domain $doh1IP\"]" /opt/de_GWD/mosdns/matchers_hosts.yaml
[[ -n $doh2IP ]] && yq eval -i ".plugins.[0].args.hosts += [\"$doh2Domain $doh2IP\"]" /opt/de_GWD/mosdns/matchers_hosts.yaml

>/etc/dnsmasq.d/98-resolv.conf
>/etc/pihole/custom.list

if [[ -n $(jq -r '.dns.hosts' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$') ]]; then
jq -r '.dns.hosts | to_entries[] | [.value, .key] | @tsv' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$' | sed 's/[[:space:]][[:space:]]*/ /g' | while read line; do
if [[ -n $(echo $line | grep "*") ]]; then
  hostDomain=$(echo $line | awk '{print$2}' | cut -d'.' -f2-)
  hostIP=$(echo $line | awk '{print$1}')
  echo "address=/$hostDomain/$hostIP" >>/etc/dnsmasq.d/98-resolv.conf
else
  hostDomain=$(echo $line | awk '{print$2}')
  hostIP=$(echo $line | awk '{print$1}')
  echo "$hostIP $hostDomain" >>/etc/pihole/custom.list
  yq eval -i ".plugins.[0].args.hosts += [\"$hostDomain $hostIP\"]" /opt/de_GWD/mosdns/matchers_hosts.yaml
fi
done
else
>/etc/pihole/custom.list
sed -i '/c/{p;:a;N;$!ba;d}' /opt/de_GWD/mosdns/matchers_hosts.yaml
fi


cat << EOF >/opt/de_GWD/mosdns/cache.yaml
plugins:
  - tag: cache
    type: cache
    args:
      redis: 'unix://:de_GWD@/dev/shm/redis-server.sock?db=0'
      redis_timeout: 50
      lazy_cache_ttl: 3600
      lazy_cache_reply_ttl: 4
      cache_everything: true

  - tag: ttl_c
    type: ttl
    args:
      minimal_ttl: 60
      maximum_ttl: 3600
EOF



cat << EOF >/opt/de_GWD/mosdns/config.yaml
log:
  level: error
  file: ''

data_providers:
  - tag: geosite
    file: ./geosite.dat
    auto_reload: true
  - tag: geoip
    file: ./geoip.dat
    auto_reload: true

include:
  - cache.yaml
  - matchers_hosts.yaml
  - matchers_nodes.yaml
  - matchers_listB.yaml
  - matchers_listW.yaml
  - forwarders.yaml

plugins:
  - tag: domains_chn
    type: query_matcher
    args:
      domain:
        - provider:geosite:cn
        - provider:geosite:tld-cn
        - provider:geosite:private

  - tag: IPs_chn
    type: response_matcher
    args:
      ip:
        - provider:geoip:cn

  - tag: dns_chnFB_sequence
    type: sequence
    args:
      exec:
        - primary:
            - forward_chn
            - if: ( ! IPs_chn )
              exec:
                - _drop_response
          secondary:
            - forward_global
          stat_length: 10
          threshold: 5
          fast_fallback: 250
          always_standby: true

  - tag: main_sequence
    type: sequence
    args:
      exec:
        - hosts
        - cache

        - if: ( domains_listB )
          exec:
            - forward_global
            - _return

        - if: ( domains_listW )
          exec:
            - forward_chn
            - _return 

        - if: ( domains_nodes )
          exec:
            - forward_global
            - _return

        - if: ( domains_chn )
          exec:
            - dns_chnFB_sequence
            - _return 

        - forward_global

servers:
  - exec: main_sequence
    timeout: 5
    listeners:
      - protocol: udp
        addr: 127.0.0.1:5341
      - protocol: tcp
        addr: 127.0.0.1:5341
EOF

systemctl restart mosdns

if [[ $? -ne 0 ]]; then
sed -i '/Nice=/d' /etc/systemd/system/mosdns.service
systemctl daemon-reload >/dev/null
systemctl restart mosdns
fi
systemctl enable mosdns >/dev/null 2>&1

echo -e "${WHITE}[ ${GREEN}âœ“ ${WHITE}]\c" && echo -e "\t${WHITE}DNS Split${cRES}"
