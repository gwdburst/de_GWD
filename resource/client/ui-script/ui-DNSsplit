#!/bin/bash
RED='\E[1;31m'
GREEN='\E[1;32m'
YELLOW='\E[1;33m'
BLUE='\E[1;34m'
PURPLE='\E[1;35m'
CYAN='\E[1;36m'
WHITE='\E[1;37m'
cRES='\E[0m'



echo -e "${WHITE}[...]\c" && echo -e "\t${WHITE}DNS Split${cRES}\r\c"
cat << EOF >/opt/de_GWD/mosdns/matchers_hosts.yaml
plugins:
  - tag: 'de_GWD_hosts'
    type: hosts
    args:
      hosts:
        - localhost 127.0.0.1
EOF

if [[ -n $(jq -r '.dns.hosts' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$') ]]; then
jq -r '.dns.hosts | to_entries[] | [.value, .key] | @tsv' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$' | sed 's/[[:space:]][[:space:]]*/ /g' >/etc/pihole/custom.list

jq -r '.dns.hosts | to_entries[] | [.key, .value] | @tsv' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$' | sed 's/[[:space:]][[:space:]]*/ /g' | while read line; do
  yq eval -i ".plugins.[0].args.hosts += [\"$line\"]" /opt/de_GWD/mosdns/matchers_hosts.yaml
done
fi



cat << EOF >/opt/de_GWD/mosdns/matchers_direct.yaml
plugins:
  - tag: 'domains_direct'
    type: query_matcher
    args:
      domain:
        - localhost
EOF

if [[ -z $(jq -r '.v2nodeDIV.nodeSM.apple' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$') ]]; then
yq -i '.plugins.[0].args.domain = ["provider:geosite:apple"]' /opt/de_GWD/mosdns/matchers_direct.yaml
jq 'del(.routing.rules[] | select(.domain == ["geosite:apple"]))' /opt/de_GWD/vtrui/config.json | sponge /opt/de_GWD/vtrui/config.json
/opt/de_GWD/ui-V2routingDomain 'direct' '["geosite:apple"]'
fi



/opt/de_GWD/ui-NodeSave

/opt/de_GWD/ui-submitListBW



doh1=$(jq -r '.dns.doh[0]' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
doh2=$(jq -r '.dns.doh[1]' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
DoG=$(jq -r '.dns.dog' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')

if [[ -n $doh1 ]]; then
doh1Domain=$(echo $doh1 | cut -d/ -f1 | cut -d: -f1)
doh1IP=$(dig @127.0.0.1 $doh1Domain -4p 5331 +short  | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | xargs -n 1 | awk NR==1)
doh1Port=$(echo $doh1 | cut -d/ -f1 | cut -d: -f2 | grep '^[[:digit:]]*$')
[[ -z $doh1Port ]] && doh1Port="443"
fi

if [[ -n $doh2 ]]; then
doh2Domain=$(echo $doh2 | cut -d/ -f1 | cut -d: -f1)
doh2IP=$(dig @127.0.0.1 $doh2Domain -4p 5331 +short  | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | xargs -n 1 | awk NR==1)
doh2Port=$(echo $doh2 | cut -d/ -f1 | cut -d: -f2 | grep '^[[:digit:]]*$')
[[ -z $doh2Port ]] && doh2Port="443"
fi

dns_global_doh1=`if [[ -n $doh1 ]]; then
cat << EOF
  - tag: 'dns_global_doh1'
    type: fast_forward
    args:
      upstream:
        - addr: 'https://$doh1'
          dial_addr: '$doh1IP:$doh1Port'
          trusted: true
          insecure_skip_verify: true
EOF
fi
`

dns_global_doh2=`if [[ -n $doh2 ]]; then
cat << EOF
  - tag: 'dns_global_doh2'
    type: fast_forward
    args:
      upstream:
        - addr: 'https://$doh2'
          dial_addr: '$doh2IP:$doh2Port'
          trusted: true
          insecure_skip_verify: true
EOF
fi
`

dns_global_dog=`if [[ -n $DoG ]]; then
cat << EOF
  - tag: 'dns_global_dog'
    type: fast_forward
    args:
      upstream:
        - addr: '127.0.0.1:5333'
          trusted: true
        - addr: 'tcp://127.0.0.1:5333'
          trusted: true
EOF
fi
`

cat << EOF >/opt/de_GWD/mosdns/forwarders.yaml
plugins:
  - tag: 'dns_chn'
    type: fast_forward
    args:
      upstream:
        - addr: '127.0.0.1:5331'
          trusted: true
        - addr: 'tcp://127.0.0.1:5331'
          trusted: true
$dns_global_doh1
$dns_global_doh2
$dns_global_dog
EOF

cat << EOF >/opt/de_GWD/mosdns/global_sequence.yaml
plugins:
  - tag: 'dns_global'
    type: 'sequence'
    args:
      exec:
        - parallel:
EOF

[[ -n $doh1IP ]] && yq eval -i '.plugins.[0].args.exec[0].parallel += ["dns_global_doh1"]' /opt/de_GWD/mosdns/global_sequence.yaml
[[ -n $doh2IP ]] && yq eval -i '.plugins.[0].args.exec[0].parallel += ["dns_global_doh2"]' /opt/de_GWD/mosdns/global_sequence.yaml
[[ -n $DoG ]] && yq eval -i '.plugins.[0].args.exec[0].parallel += ["dns_global_dog"]' /opt/de_GWD/mosdns/global_sequence.yaml

cat << EOF >/opt/de_GWD/mosdns/config.yaml
log:
  level: error
  file: ''

data_providers:
  - tag: geosite
    file: ./geosite.dat
    auto_reload: true
  - tag: geoip
    file: ./geoip.dat
    auto_reload: true

include:
  - 'matchers_hosts.yaml'
  - 'matchers_direct.yaml'
  - 'matchers_nodes.yaml'
  - 'matchers_listB.yaml'
  - 'matchers_listW.yaml'
  - 'forwarders.yaml'
  - 'global_sequence.yaml'

plugins:
  - tag: 'de_GWD_cache'
    type: cache
    args:
      size: 100000
      redis: 'unix://:de_GWD@/dev/shm/redis-server.sock?db=0'
      redis_timeout: 50
      lazy_cache_ttl: 86400
      lazy_cache_reply_ttl: 30
      cache_everything: true

  - tag: 'ttl_c'
    type: ttl
    args:
      minimal_ttl: 60
      maximum_ttl: 3600

  - tag: 'domains_chn'
    type: query_matcher
    args:
      domain:
        - 'provider:geosite:cn'
        - 'provider:geosite:tld-cn'

  - tag: 'IPs_chn'
    type: response_matcher
    args:
      ip:
        - 'provider:geoip:cn'

  - tag: 'dns_global_sequence'
    type: sequence
    args:
      exec:
        - 'dns_global'

  - tag: 'dns_chn_sequence'
    type: sequence
    args:
      exec:
        - 'dns_chn'

  - tag: 'dns_chnFB_sequence'
    type: sequence
    args:
      exec:
        - primary:
            - 'dns_chn'
            - if: '!IPs_chn'
              exec:
                - _drop_response
          secondary:
            - 'dns_global'
          fast_fallback: 250
          always_standby: true

  - tag: 'de_GWD_sequence'
    type: sequence
    args:
      exec:
        - 'de_GWD_hosts'
        - 'de_GWD_cache'
        - if: 'domains_listB'
          exec:
            - 'dns_global_sequence'
            - 'ttl_c'
            - _return

        - if: 'domains_listW'
          exec:
            - 'dns_chn_sequence'
            - 'ttl_c'
            - _return 

        - if: 'domains_direct'
          exec:
            - 'dns_chnFB_sequence'
            - 'ttl_c'
            - _return 
            
        - if: 'domains_chn'
          exec:
            - 'dns_chnFB_sequence'
            - 'ttl_c'
            - _return 

        - 'dns_global_sequence'
        - 'ttl_c'
        
servers:
  - exec: de_GWD_sequence
    timeout: 5
    listeners:
      - protocol: udp
        addr: "127.0.0.1:5341"
      - protocol: tcp
        addr: "127.0.0.1:5341"
EOF

systemctl restart mosdns

if [[ $? -ne 0 ]]; then
sed -i '/Nice=/d' /etc/systemd/system/mosdns.service
systemctl daemon-reload >/dev/null
systemctl restart mosdns
fi
systemctl enable mosdns >/dev/null 2>&1

echo -e "${WHITE}[ ${GREEN}âœ“ ${WHITE}]\c" && echo -e "\t${WHITE}DNS Split${cRES}"
