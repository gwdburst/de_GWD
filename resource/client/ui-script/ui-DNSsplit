#!/bin/bash
RED='\E[1;31m'
GREEN='\E[1;32m'
YELLOW='\E[1;33m'
BLUE='\E[1;34m'
PURPLE='\E[1;35m'
CYAN='\E[1;36m'
WHITE='\E[1;37m'
cRES='\E[0m'



echo -e "${WHITE}[...]\c" && echo -e "\t${WHITE}DNS Split${cRES}\r\c"
/opt/de_GWD/ui-NodeSave
/opt/de_GWD/ui-submitListBW



doh1=$(jq -r '.dns.doh[0]' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
doh2=$(jq -r '.dns.doh[1]' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
dog=$(jq -r '.dns.dog' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')

concurrent=0
if [[ -n $doh1 ]]; then
doh1Domain=$(echo $doh1 | cut -d/ -f1 | cut -d: -f1)
doh1IP=$(dig @127.0.0.1 $doh1Domain -4p 5331 +short  | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | xargs -n 1 | awk NR==1)
doh1Port=$(echo $doh1 | cut -d/ -f1 | cut -d: -f2 | grep '^[[:digit:]]*$')
[[ -z $doh1Port ]] && doh1Port="443"

forward_doh1=`
cat << EOF
- tag: forward_doh1
          addr: https://$doh1
          dial_addr: $doh1IP:$doh1Port
          max_conns: 12
          insecure_skip_verify: true
EOF
`

((concurrent++))
fi

if [[ -n $doh2 ]]; then
doh2Domain=$(echo $doh2 | cut -d/ -f1 | cut -d: -f1)
doh2IP=$(dig @127.0.0.1 $doh2Domain -4p 5331 +short  | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | xargs -n 1 | awk NR==1)
doh2Port=$(echo $doh2 | cut -d/ -f1 | cut -d: -f2 | grep '^[[:digit:]]*$')
[[ -z $doh2Port ]] && doh2Port="443"

forward_doh2=`
cat << EOF
- tag: forward_doh2
          addr: https://$doh2
          dial_addr: $doh2IP:$doh2Port
          max_conns: 12
          insecure_skip_verify: true
EOF
`

((concurrent++))
fi

if [[ -n $dog ]]; then
forward_dog=`
cat << EOF
- tag: forward_dog
          addr: 127.0.0.1:5333
EOF
`

((concurrent++))
fi



cat << EOF >/opt/de_GWD/mosdns/forwarders.yaml
plugins:
  - tag: forward_global
    type: forward
    args:
      concurrent: $concurrent
      upstreams:
        $forward_doh1
        $forward_doh2
        $forward_dog
EOF

cat << EOF >/opt/de_GWD/mosdns/hosts.yaml
plugins:
  - tag: hosts
    type: hosts
    args:
      entries:
        - localhost 127.0.0.1
EOF

[[ -n $doh1IP ]] && yq eval -i ".plugins.[0].args.entries += [\"$doh1Domain $doh1IP\"]" /opt/de_GWD/mosdns/hosts.yaml
[[ -n $doh2IP ]] && yq eval -i ".plugins.[0].args.entries += [\"$doh2Domain $doh2IP\"]" /opt/de_GWD/mosdns/hosts.yaml

>/etc/dnsmasq.d/98-resolv.conf
>/etc/pihole/custom.list

if [[ -n $(jq -r '.dns.hosts' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$') ]]; then
jq -r '.dns.hosts | to_entries[] | [.value, .key] | @tsv' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$' | sed 's/[[:space:]][[:space:]]*/ /g' | while read line; do
if [[ -n $(echo $line | grep "*") ]]; then
  hostDomain=$(echo $line | awk '{print$2}' | cut -d'.' -f2-)
  hostIP=$(echo $line | awk '{print$1}')
  echo "address=/$hostDomain/$hostIP" >>/etc/dnsmasq.d/98-resolv.conf
else
  hostDomain=$(echo $line | awk '{print$2}')
  hostIP=$(echo $line | awk '{print$1}')
  echo "$hostIP $hostDomain" >>/etc/pihole/custom.list
  yq eval -i ".plugins.[0].args.entries += [\"$hostDomain $hostIP\"]" /opt/de_GWD/mosdns/hosts.yaml
fi
done
else
>/etc/pihole/custom.list
sed -i '/c/{p;:a;N;$!ba;d}' /opt/de_GWD/mosdns/hosts.yaml
fi



cat << EOF >/opt/de_GWD/mosdns/config.yaml
log:
  level: error

include:
  - hosts.yaml
  - forwarders.yaml

plugins:
  - tag: chn_sequence
    type: sequence
    args:
      - exec: forward 127.0.0.1:5331 tcp://127.0.0.1:5331
      - matches: resp_ip &/opt/de_GWD/.repo/IPchnroute
        exec: accept
      - exec: reject

  - tag: global_sequence
    type: sequence
    args:
      - exec: \$forward_global
      - exec: accept

  - tag: fallback
    type: fallback
    args:
      primary: chn_sequence
      secondary: global_sequence
      threshold: 300
      always_standby: true

  - tag: main_sequence
    type: sequence
    args:
      - exec: \$hosts
      - matches: has_resp
        exec: accept

      - matches: qname &/opt/de_GWD/mosdns/domains_listB
        exec: goto global_sequence

      - matches: qname &/opt/de_GWD/mosdns/domains_listW
        exec: forward 127.0.0.1:5331 tcp://127.0.0.1:5331
      - matches: has_resp
        exec: accept

      - matches: qname &/opt/de_GWD/mosdns/domains_nodes
        exec: goto global_sequence

      - matches: qname &/opt/de_GWD/.repo/Domains.chn.txt
        exec: \$fallback

      - exec: goto global_sequence

  - type: udp_server
    args:
      entry: main_sequence
      listen: 127.0.0.1:5341

  - type: tcp_server
    args:
      entry: main_sequence
      listen: 127.0.0.1:5341
EOF
systemctl restart mosdns

if [[ $? -ne 0 ]]; then
sed -i '/Nice=/d' /etc/systemd/system/mosdns.service
systemctl daemon-reload >/dev/null
systemctl restart mosdns
fi
systemctl enable mosdns >/dev/null 2>&1

echo -e "${WHITE}[ ${GREEN}âœ“ ${WHITE}]\c" && echo -e "\t${WHITE}DNS Split${cRES}"
