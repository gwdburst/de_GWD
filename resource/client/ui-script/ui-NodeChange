#!/bin/bash
address=$(jq -r --argjson domainNUM "$1" '.v2node | to_entries[] | select(.key == $domainNUM) | .value.domain' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
tls=$(jq -r --argjson domainNUM "$1" '.v2node | to_entries[] | select(.key == $domainNUM) | .value.tls' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
uuid=$(jq -r --argjson domainNUM "$1" '.v2node | to_entries[] | select(.key == $domainNUM) | .value.uuid' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')
path=$(jq -r --argjson domainNUM "$1" '.v2node | to_entries[] | select(.key == $domainNUM) | .value.path' /opt/de_GWD/0conf 2>/dev/null | grep -v '^null$')

domain=$(echo -e $address | cut -d: -f1)
port=$(echo -e $address | cut -d: -f2 | grep '^[[:digit:]]*$')
[[ -z $port ]] && port="443"
[[ -z $tls ]] && tls=$domain

jq '.update.v2node={}' /opt/de_GWD/0conf |\
jq --arg domain "$domain" '.update.v2node.domain=$domain' |\
jq --arg tls "$tls" '.update.v2node.tls=$tls' |\
jq --arg port "$port" '.update.v2node.port=$port' |\
jq --arg uuid "$uuid" '.update.v2node.uuid=$uuid' |\
jq --arg path "$path" '.update.v2node.path=$path' | sponge /opt/de_GWD/0conf
chmod 666 /opt/de_GWD/0conf


if [[ -z $path ]]; then
OBdefault=`cat << EOF
    {
      "tag": "default",
      "protocol": "vmess",
      "settings": {
        "vnext": [
          {
            "address": "$domain",
            "port": $port,
            "users": [
              {
                "id": "$uuid",
                "alterId": 0,
                "security": "auto"
              }
            ]
          }
        ]
      },
      "streamSettings": {
        "network": "tcp",
        "sockopt": {
          "mark": 255,
          "tcpFastOpen": true
        }
      },
      "mux":{"enabled":false,"concurrency":1}
    }
EOF
`
else
OBdefault=`cat << EOF
    {
      "tag": "default",
      "protocol": "vmess",
      "settings": {
        "vnext": [
          {
            "address": "$domain",
            "port": $port,
            "users": [
              {
                "id": "$uuid",
                "alterId": 0,
                "security": "auto"
              }
            ]
          }
        ]
      },
      "streamSettings": {
        "network": "ws",
        "wsSettings": {
          "path": "$path",
          "headers": {
            "Host": "$tls"
          }
        },
        "security": "tls",
        "tlsSettings": {
          "serverName": "$tls",
          "allowInsecure": false
        },
        "sockopt": {
          "mark": 255,
          "tcpFastOpen": true
        }
      },
      "mux":{"enabled":true,"concurrency":8}
    }
EOF
`
fi

jq --argjson OBdefault "$OBdefault" '.outbounds[0]=$OBdefault' /opt/de_GWD/vtrui/config.json | sponge /opt/de_GWD/vtrui/config.json

systemctl restart vtrui



NODE_DOMAIN=$(jq -r '.outbounds[0].settings.vnext[0].address' /opt/de_GWD/vtrui/config.json 2>/dev/null | grep -v '^null$')
ECS_GLOBAL=$(dig @127.0.0.1 $NODE_DOMAIN -4p 5332 +short  | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | grep -v "127.0.0.1" | xargs -n 1 | sed '/^\s*$/d')
if [[ -n $ECS_GLOBAL ]]; then
jq --arg ECS_GLOBAL $ECS_GLOBAL '.dns.ECS_GLOBAL=$ECS_GLOBAL' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
yq eval -i ".plugins.[0].args.ipv4 = \"$ECS_GLOBAL\"" /opt/de_GWD/mosdns/ecs.yaml && systemctl restart mosdns
fi
