#!/bin/bash
clear
function blue()   { echo -e "\033[34m\033[01m $1 \033[0m"; }
function yellow() { echo -e "\033[33m\033[01m $1 \033[0m"; }
function green()  { echo -e "\033[32m\033[01m $1 \033[0m"; }
function red()    { echo -e "\033[31m\033[01m $1 \033[0m"; }


function preinstall(){
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LC_TYPE=en_US.UTF-8
export LANG=en_US.UTF-8
locale-gen en_US.UTF-8

sed -i '/GRUB_CMDLINE_LINUX_DEFAULT=/c\GRUB_CMDLINE_LINUX_DEFAULT="quiet splash zswap.enabled=1 zswap.compressor=lz4"'  /etc/default/grub
update-grub

sed -i '/65535/d' /etc/security/limits.conf
sed -i '/# End of file/i\* soft nproc 65535' /etc/security/limits.conf
sed -i '/# End of file/i\* hard nproc 65535' /etc/security/limits.conf
sed -i '/# End of file/i\* soft nofile 65535' /etc/security/limits.conf
sed -i '/# End of file/i\* hard nofile 65535' /etc/security/limits.conf
echo "ulimit -n 65535" > ~/.bash_profile

cat > /etc/sysctl.conf << EOF
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv4.tcp_fastopen = 3
fs.file-max=65535
net.ipv4.tcp_syncookies=1
net.ipv4.tcp_syn_retries=2
net.ipv4.tcp_synack_retries=2
net.ipv4.tcp_timestamps=0
net.ipv4.tcp_fin_timeout=30
net.core.default_qdisc = fq
net.ipv4.tcp_congestion_control = bbrplus
EOF
sysctl -p

apt update && apt -y upgrade
apt install -y net-tools curl rsync ca-certificates unzip git build-essential libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev libatomic-ops-dev socat
}


function installv2ray(){
mkdir -p /etc/v2ray
mkdir -p /usr/bin/v2ray
mkdir -p /var/log/v2ray
wget https://github.com/jacyl4/de_GWD/raw/master/de_GWD_Client/v2amd64.zip -O ~/v2amd64.zip
unzip v2amd64.zip
mv -f ~/v2amd64/v2ray /usr/bin/v2ray/v2ray
mv -f ~/v2amd64/v2ctl /usr/bin/v2ray/v2ctl
mv -f ~/v2amd64/v2ray.service /etc/systemd/system/v2ray.service
rm -rf ~/v2amd64
rm -rf ~/v2amd64.zip
chmod +x /usr/bin/v2ray/v2ray
chmod +x /usr/bin/v2ray/v2ctl
}


function installnginxlasest(){
wget https://www.openssl.org/source/openssl-1.1.1b.tar.gz
tar zxvf openssl-1.1.1b.tar.gz
cd openssl-1.1.1b

wget https://github.com/hakasenyang/openssl-patch/raw/master/openssl-equal-1.1.1b.patch
wget https://github.com/hakasenyang/openssl-patch/raw/master/openssl-1.1.1b-chacha_draft.patch
patch -p1 < openssl-equal-1.1.1b.patch
patch -p1 < openssl-1.1.1b-chacha_draft.patch

./config -Wl,--enable-new-dtags,-rpath,'$(LIBRPATH)'
make -j $(nproc --all) && make install
cp /usr/local/bin/openssl /usr/bin/
export LD_LIBRARY_PATH=/usr/local/lib
echo "export LD_LIBRARY_PATH=/usr/local/lib" >> ~/.bashrc
cd ~


wget https://ftp.pcre.org/pub/pcre/pcre-8.43.tar.gz
tar -zxvf pcre-8.43.tar.gz
cd pcre-8.43
./configure
make -j $(nproc --all) && make install
cd ~


wget https://github.com/jemalloc/jemalloc/releases/download/5.2.0/jemalloc-5.2.0.tar.bz2
tar xjvf jemalloc-5.2.0.tar.bz2
cd jemalloc-5.2.0
./configure
make -j $(nproc --all) && make install
echo '/usr/local/lib' > /etc/ld.so.conf.d/local.conf
ldconfig
cd ~


git clone https://github.com/eustas/ngx_brotli.git
pushd ngx_brotli
git submodule update --init
cd ~

mkdir -p /usr/lib64/nginx/modules
mkdir -p /etc/nginx/conf.d
mkdir -p /var/log/nginx
mkdir -p /var/cache/nginx/client_temp
mkdir -p /var/cache/nginx/proxy_temp
mkdir -p /var/cache/nginx/fastcgi_temp
mkdir -p /var/cache/nginx/uwsgi_temp
mkdir -p /var/cache/nginx/scgi_temp

wget https://nginx.org/download/nginx-1.17.0.tar.gz
tar zxvf nginx-1.17.0.tar.gz
sed -i 's@CFLAGS="$CFLAGS -g"@#CFLAGS="$CFLAGS -g"@' ~/nginx-1.17.0/auto/cc/gcc
[ ! -d "/etc/nginx" ] && mkdir -p /etc/nginx
cd nginx-1.17.0
wget https://github.com/kn007/patch/raw/master/nginx.patch
wget https://github.com/kn007/patch/raw/master/nginx_auto_using_PRIORITIZE_CHACHA.patch
wget https://github.com/kn007/patch/raw/master/nginx_strict-sni.patch
patch -p1 < nginx.patch
patch -p1 < nginx_auto_using_PRIORITIZE_CHACHA.patch
patch -p1 < nginx_strict-sni.patch

./configure \
--prefix=/etc/nginx \
--sbin-path=/usr/sbin/nginx \
--modules-path=/usr/lib64/nginx/modules \
--conf-path=/etc/nginx/nginx.conf \
--error-log-path=/var/log/nginx/error.log \
--http-log-path=/var/log/nginx/access.log \
--pid-path=/run/nginx.pid \
--lock-path=/run/nginx.lock \
--http-client-body-temp-path=/var/cache/nginx/client_temp \
--http-proxy-temp-path=/var/cache/nginx/proxy_temp \
--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
--http-scgi-temp-path=/var/cache/nginx/scgi_temp \
--user=www-data \
--group=www-data \
--with-compat \
--with-file-aio \
--with-threads \
--with-http_addition_module \
--with-http_auth_request_module \
--with-http_dav_module \
--with-http_flv_module \
--with-http_gunzip_module \
--with-http_gzip_static_module \
--with-http_mp4_module \
--with-http_random_index_module \
--with-libatomic \
--with-openssl=../openssl-1.1.1b \
--with-openssl-opt='zlib -march=native -ljemalloc -Wl,-flto' \
--with-http_realip_module \
--with-http_secure_link_module \
--with-http_slice_module \
--with-http_ssl_module \
--with-http_stub_status_module \
--with-http_sub_module \
--with-http_v2_module \
--with-mail \
--with-mail_ssl_module \
--with-stream \
--with-stream_realip_module \
--with-stream_ssl_module \
--with-stream_ssl_preread_module \
--with-pcre=../pcre-8.43 \
--with-pcre-jit \
--with-http_degradation_module \
--with-cc-opt='-DTCP_FASTOPEN=23 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC' \
--with-ld-opt='-ljemalloc -Wl,-z,relro -Wl,-z,now -pie' \
--with-http_spdy_module \
--with-http_v2_hpack_enc \
--add-module=../ngx_brotli

make -j $(nproc --all) && make install
cd ~

cat > /lib/systemd/system/nginx.service << EOF
[Unit]
Description=nginx - high performance web server
Documentation=http://nginx.org/en/docs/
Requires=network.target network-online.target
After=syslog.target network.target network-online.target remote-fs.target nss-lookup.target
Wants=network-online.target

[Service]
Type=forking
PIDFile=/run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx.conf -g 'daemon on; master_process on;'
ExecStart=/usr/sbin/nginx -g 'daemon on; master_process on;'
ExecReload=/usr/sbin/nginx -s reload -g 'daemon on; master_process on;'
ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid
TimeoutStopSec=5
Restart=always
KillMode=mixed

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl restart nginx
systemctl enable nginx

rm -rf ~/nginx*
rm -rf ~/jemalloc*
rm -rf ~/openssl*
rm -rf ~/pcre*
rm -rf ~/ngx_brotli
}


function nginxconf(){
cat > /etc/nginx/nginx.conf << EOF
user  www-data www-data;
worker_processes auto;
pid   /run/nginx.pid;

    worker_rlimit_nofile 65535;

events {
    use epoll;
    worker_connections  65535;
    multi_accept on;
}

http {
  include mime.types;
  default_type application/octet-stream;

  sendfile            on;
  tcp_nodelay         on;
  tcp_nopush          on;
  keepalive_timeout   120;
  server_tokens       off;

  brotli              on;
  brotli_static       on;
  brotli_comp_level   6;
  brotli_buffers      16 8k;
  brotli_min_length   20;
  brotli_window       16m;
  brotli_types        *;

  access_log off;
  error_log off;

  include /etc/nginx/conf.d/*.conf;
}

EOF
}


function makessl(){
cat > /etc/nginx/conf.d/default.conf<< EOF
server {
    listen       80;
    server_name $vpsdomain www.$vpsdomain;
    root /var/www/html;
    index index.php index.html index.htm;
}
EOF
systemctl restart nginx

mkdir -p /var/www/ssl
curl https://get.acme.sh | sh
~/.acme.sh/acme.sh --issue -d $vpsdomain -w /var/www/html
~/.acme.sh/acme.sh --installcert -d $vpsdomain \
               --keypath       /var/www/ssl/$vpsdomain.key  \
               --fullchainpath /var/www/ssl/$vpsdomain.key.pem \
               --reloadcmd     "systemctl force-reload nginx"
openssl dhparam -out /var/www/ssl/dhparam.pem 2048
openssl x509 -outform der -in /var/www/ssl/$vpsdomain.key.pem -out /var/www/ssl/$vpsdomain.crt

cat > /var/www/ssl/update_ocsp_cache << EOF
#!/bin/bash
wget -O intermediate.pem https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem
wget -O root.pem https://ssl-tools.net/certificates/dac9024f54d8f6df94935fb1732638ca6ad77c13.pem
mv intermediate.pem /var/www/ssl
mv root.pem /var/www/ssl
cat /var/www/ssl/intermediate.pem > /var/www/ssl/bundle.pem
cat /var/www/ssl/root.pem >> /var/www/ssl/bundle.pem

openssl ocsp -no_nonce \
    -issuer  /var/www/ssl/intermediate.pem \
    -cert    /var/www/ssl/$vpsdomain.key.pem \
    -CAfile  /var/www/ssl/bundle.pem \
    -VAfile  /var/www/ssl/bundle.pem \
    -url     http://ocsp.int-x3.letsencrypt.org \
    -respout /var/www/ssl/ocsp.resp
EOF
chmod +x /var/www/ssl/update_ocsp_cache
/var/www/ssl/update_ocsp_cache

if [[ "$(crontab -l | grep 'update_ocsp_cache' | awk '{print $6}')" != "/var/www/ssl/update_ocsp_cache" ]]; then
crontab -l > now.cron
echo '0 0 * * 7 /var/www/ssl/update_ocsp_cache' >> now.cron
crontab now.cron
fi
}


function nginxwebconf(){
cat > /etc/nginx/conf.d/default.conf<< EOF
upstream dns-backend { server 127.0.0.1:8053; }

server {
  listen 80;
  server_name $vpsdomain www.$vpsdomain;
  return 301 https://\$server_name\$request_uri;
}

server {
  listen 443 ssl http2 spdy fastopen=64 reuseport;
  server_name $vpsdomain www.$vpsdomain;
  root /var/www/html;
  index index.php index.html index.htm index.nginx-debian.html;

  ssl_certificate /var/www/ssl/$vpsdomain.key.pem;
  ssl_certificate_key /var/www/ssl/$vpsdomain.key;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;
  ssl_session_timeout 10m;
  ssl_session_cache shared:le_nginx_SSL:10m;
  ssl_buffer_size 1400;
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
  ssl_dhparam /var/www/ssl/dhparam.pem;

  ssl_early_data on;
  proxy_set_header Early-Data \$ssl_early_data;

  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_stapling_file /var/www/ssl/ocsp.resp;
  resolver 8.8.8.8 valid=600s;
  resolver_timeout 5s;

location /dq {
  proxy_http_version      1.1;
  proxy_set_header Host \$http_host;
  proxy_set_header Upgrade "";
  proxy_set_header X-Real-IP \$remote_addr;
  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_read_timeout      86400;
  keepalive_requests      25600;
  keepalive_timeout       300 300;
  proxy_redirect          off;
  proxy_buffering         off;
  proxy_pass              http://dns-backend;
}

location $v2path {
  proxy_http_version      1.1;
  proxy_set_header Host \$http_host;
  proxy_set_header Upgrade WebSocket;
  proxy_set_header Connection Upgrade;
  proxy_set_header X-Real-IP \$remote_addr;
  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_read_timeout      86400;
  keepalive_requests      25600;
  keepalive_timeout       300 300;
  proxy_redirect          off;
  proxy_buffering         off;
  proxy_pass              http://127.0.0.1:11811;
}

}
EOF
}


function installpihole(){
curl -sSL https://install.pi-hole.net | bash
systemctl disable lighttpd
systemctl mask lighttpd
echo "" > /etc/pihole/adlists.list
pihole -g
sed -i '/PIHOLE_DNS/d'  /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_4=8.8.4.4' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_3=8.8.8.8' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_2=1.0.0.1' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_1=1.1.1.1' /etc/pihole/setupVars.conf
sed -i '/server=/d'  /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=1.1.1.1' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=1.0.0.1' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=8.8.8.8' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=8.8.4.4' /etc/dnsmasq.d/01-pihole.conf
pihole restartdns
}


function installdoh(){
source ~/.profile
rm -rf ~/dns-over-https
rm -rf /usr/local/bin/doh-client
rm -rf /usr/local/bin/doh-server
rm -rf /etc/NetworkManager/dispatcher.d
rm -rf /usr/lib/systemd/system/doh-client.service
rm -rf /usr/lib/systemd/system/doh-server.service
git clone https://github.com/m13253/dns-over-https.git
cd dns-over-https
make -j $(nproc --all) && make install
cd ~
wget https://raw.githubusercontent.com/jacyl4/de_GWD/master/de_GWD_Server/doh-server.conf -O /etc/dns-over-https/doh-server.conf
rm -rf ~/dns-over-https
}


function postinstall(){
cat > /usr/local/bin/updateGWD << "EOF"
#!/bin/bash
date -s "$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"
hwclock -w

rm -rf ~/server*
EOF
chmod +x /usr/local/bin/updateGWD
/usr/local/bin/updateGWD

if [[ "$(crontab -l | grep 'updateGWD' | awk '{print $6}')" != "/usr/local/bin/updateGWD" ]]; then
crontab -l > now.cron
echo '0 0 * * * /usr/local/bin/updateGWD' >> now.cron
crontab now.cron
fi
rm -rf now.cron

wget https://github.com/jacyl4/de_GWD/raw/master/de_GWD_Server/sample.zip
unzip sample.zip 
rsync -r ~/sample/* /var/www/html/
rm -rf ~/sample*
}



installgwd(){
    green "=============================="
    green " 输入此VPS的域名(不加www开头)"
    green "=============================="
    read vpsdomain

    green "=============================="
    green " v2ray uuid"
    green "=============================="
    read uuidnum

    green "=============================="
    green " v2ray path (格式：/xxxx)"
    green "=============================="
    read v2path

cd ~
preinstall

installv2ray
wget https://raw.githubusercontent.com/jacyl4/de_GWD/master/de_GWD_Server/v2wt-server.json -O /etc/v2ray/config.json
sed -i '/"id":/c\"id": "'$uuidnum'",'  /etc/v2ray/config.json
sed -i '/"path":/c\"path": "'$v2path'"'  /etc/v2ray/config.json
systemctl restart v2ray
systemctl enable v2ray

installnginxlasest

nginxconf

makessl

nginxwebconf

mkdir -p /etc/systemd/system/nginx.service.d
printf "[Service]\nExecStartPost=/bin/sleep 0.1\n" > /etc/systemd/system/nginx.service.d/override.conf
systemctl daemon-reload
systemctl restart nginx
systemctl enable nginx

installpihole

wget https://dl.google.com/go/go1.11.9.linux-amd64.tar.gz
tar -xvf go*linux-amd64.tar.gz
rm -rf ~/go*linux-amd64.tar.gz
rsync -r ~/go /usr/local
mkdir ~/gopath
cat > ~/.profile << "EOF"
if [ "$BASH" ]; then
  if [ -f ~/.bashrc ]; then
    . ~/.bashrc
  fi
fi

mesg n || true

export GOROOT=/usr/local/go
export GOPATH=~/gopath
export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
EOF
rm -rf ~/go

installdoh
systemctl disable systemd-resolved
systemctl mask systemd-resolved
systemctl daemon-reload
systemctl restart doh-server
systemctl enable doh-server

ethernetnum="$(ip --oneline link show up | grep -v "lo" | awk '{print $2}' | cut -d':' -f1 | cut -d'@' -f1)"
localaddr="$(ip -oneline -family inet address show |  awk '{print $4}' | awk 'END {print}' | cut -d '/' -f1)"
gatewayaddr="$(route -n |  awk 'NR==3{print $2}')"
sed -i "/static ip_address=/c\static ip_address=$localaddr/24" /etc/dhcpcd.conf
sed -i "/static routers=/c\static routers=$gatewayaddr" /etc/dhcpcd.conf
sed -i "/static domain_name_servers=/c\static domain_name_servers=127.0.0.1" /etc/dhcpcd.conf
sed -i '/nameserver/c\nameserver 127.0.0.1'  /etc/resolv.conf
sed -i "/IPV4_ADDRESS=/c\IPV4_ADDRESS=$localaddr/24"  /etc/pihole/setupVars.conf
cat > /etc/network/interfaces << EOF
source /etc/network/interfaces.d/*

auto lo
iface lo inet loopback

auto $ethernetnum
iface $ethernetnum inet static
  address $localaddr
  netmask 255.255.255.0
  gateway $gatewayaddr
EOF
sed -i '/nameserver/c\nameserver 127.0.0.1'  /etc/resolv.conf
pihole restartdns

postinstall

blue "------------------"
blue  "安装de_GWD [完毕]"
blue "------------------"
}



installlowlatencybbr(){
mkdir -p ~/bbrkernel && cd ~/bbrkernel
wget http://ftp.br.debian.org/debian/pool/main/o/openssl/libssl1.0.0_1.0.1t-1+deb8u8_amd64.deb
dpkg -i libssl1.0.0_1.0.1t-1+deb8u8_amd64.deb
wget -N --no-check-certificate https://kernel.ubuntu.com/~kernel-ppa/mainline/v4.16.2/linux-headers-4.16.2-041602_4.16.2-041602.201804121130_all.deb
wget -N --no-check-certificate https://kernel.ubuntu.com/~kernel-ppa/mainline/v4.16.2/linux-headers-4.16.2-041602-lowlatency_4.16.2-041602.201804121130_amd64.deb
wget -N --no-check-certificate https://kernel.ubuntu.com/~kernel-ppa/mainline/v4.16.2/linux-image-4.16.2-041602-lowlatency_4.16.2-041602.201804121130_amd64.deb
dpkg -i linux-headers-*_all.deb
dpkg -i linux-headers-*-lowlatency_*_amd64.deb
dpkg -i linux-image-*-lowlatency_*_amd64.deb

cat > ~/bbrkernel/clearkernel <<EOF
#!/bin/bash
PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

cd ~/bbrkernel
wget -O Makefile https://github.com/jacyl4/tcp-nanqinlang/raw/master/Makefile/Makefile-Debian9
wget https://github.com/jacyl4/tcp-nanqinlang/raw/master/General/Debian/source/kernel-v4.16/tcp_nanqinlang.c
make -j \$(nproc --all) && make install

sed -i '/net.core.default_qdisc/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf
echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = nanqinlang" >> /etc/sysctl.conf
sysctl -p

/usr/bin/apt purge -y linux-image-*-amd64
/usr/bin/apt purge -y linux-image-*-bbrplus
update-grub
crontab -l > ~/now.cron
sed -i '/clearkernel/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
rm -rf ~/bbrkernel
reboot
EOF
chmod +x ~/bbrkernel/clearkernel
crontab -l > ~/now.cron
echo '@reboot sleep 10 ; ~/bbrkernel/clearkernel' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron

blue "-------------------------------"
blue  "安装低延迟内核+南琴浪bbr [完毕]"
blue "-------------------------------"
reboot
}



installbbrplus(){
mkdir -p ~/bbrkernel && cd ~/bbrkernel
wget -N --no-check-certificate http://github.com/cx9208/Linux-NetSpeed/raw/master/bbrplus/debian-ubuntu/x64/linux-headers-4.14.91.deb
wget -N --no-check-certificate http://github.com/cx9208/Linux-NetSpeed/raw/master/bbrplus/debian-ubuntu/x64/linux-image-4.14.91.deb
dpkg -i linux-headers-*.deb
dpkg -i linux-image-*.deb

cat > ~/bbrkernel/clearkernel <<EOF
#!/bin/bash
PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

sed -i '/net.core.default_qdisc/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf
echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbrplus" >> /etc/sysctl.conf
sysctl -p

/usr/bin/apt purge -y linux-image-*-amd64
/usr/bin/apt purge -y linux-image-*-lowlatency
update-grub
crontab -l > ~/now.cron
sed -i '/clearkernel/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
rm -rf ~/bbrkernel
reboot
EOF
chmod +x ~/bbrkernel/clearkernel
crontab -l > ~/now.cron
echo '@reboot sleep 10 ; ~/bbrkernel/clearkernel' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron

blue "------------------"
blue  "安装bbrplus [完毕]"
blue "------------------"
reboot
}



change_staticip(){
    green "====================="
    green "本机地址（留空回车跳过）"
    green "====================="
    read localaddr
if [[ "$localaddr" != "" ]]; then 
sed -i "/address/c\address $localaddr"  /etc/network/interfaces
sed -i "/IPV4_ADDRESS=/c\IPV4_ADDRESS=$localaddr/24"  /etc/pihole/setupVars.conf
fi

    green "====================="
    green "网关地址（留空回车跳过）"
    green "====================="
    read gatewayaddr
if [[ "$gatewayaddr" != "" ]]; then 
sed -i "/gateway/c\gateway $gatewayaddr"  /etc/network/interfaces
fi

sed -i '/nameserver/c\nameserver 127.0.0.1'  /etc/resolv.conf
sed -i "/static ip_address=/c\static ip_address=$localaddr/24" /etc/dhcpcd.conf
sed -i "/static routers=/c\static routers=$gatewayaddr" /etc/dhcpcd.conf
sed -i "/static domain_name_servers=/c\static domain_name_servers=127.0.0.1" /etc/dhcpcd.conf
blue "------------------"
blue  "更改静态IP [完毕]"
blue "------------------"
}



modify_upstream(){
    green "==============================="
    green "Y.修改上级跃点 / N.删除上级跃点"
    green "==============================="
    read v2rayupstreamyn
if [[ "$v2rayupstreamyn" = "Y" ]] || [[ "$v2rayupstreamyn" = "y" ]]; then
sed -i '/"outbounds":/,$d' /etc/v2ray/config.json

    green "============"
    green "上级跃点域名"
    green "============"
    read upstreamdomain

    green "============"
    green "上级跃点UUID"
    green "============"
    read upstreamuuid

    green "============"
    green "上级跃点path"
    green "============"
    read upstreampath

cat >> /etc/v2ray/config.json << EOF
  "outbounds": [
    {
    "mux": { "enabled": true },
    "protocol": "vmess",
    "settings": {
      "vnext": [{
        "address": "$upstreamdomain",
        "port": 443,
        "users": [{
          "id": "$upstreamuuid",
          "level": 1,
          "alterId": 64,
          "security": "none"
          }]
        }]
    },
    "streamSettings": {
      "network": "ws",
      "security": "tls",
      "tlsSettings": {
        "serverName": "$upstreamdomain",
        "allowInsecure": false
        },
      "wsSettings": {
        "path": "$upstreampath",
        "headers": {
          "Host": "$upstreamdomain"
          }
        }
      }
    }
  ]
}
EOF
systemctl restart v2ray
blue "--------------------"
blue  "修改上级跃点 [完毕]"
blue "--------------------"

elif [[ "$v2rayupstreamyn" = "N" ]] || [[ "$v2rayupstreamyn" = "n" ]]; then
sed -i '/"outbounds":/,$d' /etc/v2ray/config.json
cat >> /etc/v2ray/config.json << EOF
  "outbounds": [
    {
      "protocol": "freedom",
      "settings": {}
    }
  ]
}
EOF
systemctl restart v2ray
blue "--------------------"
blue  "删除上级跃点 [完毕]"
blue "--------------------"
fi
}



change_v2rayverify(){
    green "========="
    green "新的UUID"
    green "========="
    read v2raynuuid

    green "========="
    green "新的path"
    green "========="
    read v2raynpath

sed -i "$(sed -n -e '/location/=' /etc/nginx/conf.d/default.conf | awk 'NR==2{print}')s/.*/location "'\'$v2raynpath''" {/" /etc/nginx/conf.d/default.conf

systemctl restart nginx

sed -i "$(sed -n -e '/"id":/=' /etc/v2ray/config.json | awk 'NR==1{print}')s/.*/"'"id"'": "'"'$v2raynuuid'"'",/" /etc/v2ray/config.json
sed -i "$(sed -n -e '/"path":/=' /etc/v2ray/config.json | awk 'NR==1{print}')s/.*/"'"path"'": "'"\'$v2raynpath'"'"/" /etc/v2ray/config.json
systemctl restart v2ray
blue "-------------------------"
blue  "修改本机UUID&path [完毕]"
blue "-------------------------"
}



updatepihole(){
installpihole

blue "-------------------"
blue "更新Pi-hole [完毕]"
blue "-------------------"
}



updategwd(){
cd ~
preinstall
vpsdomain=$(cd /var/www/ssl/ && ls 2>&1 | grep *crt | cut -d . -f3 --complement)

uuidnum=$(awk "/[Ri]d/" /etc/v2ray/config.json | awk 'NR==1{print}' | cut -d '"' -f 4)
v2path=$(awk "/[Rp]ath/" /etc/v2ray/config.json | awk 'NR==1{print}' | cut -d '"' -f 4)

installv2ray
wget https://raw.githubusercontent.com/jacyl4/de_GWD/master/de_GWD_Server/v2wt-server.json -O /etc/v2ray/config.json
sed -i '/"id":/c\"id": "'$uuidnum'",'  /etc/v2ray/config.json
sed -i '/"path":/c\"path": "'$v2path'"'  /etc/v2ray/config.json
systemctl daemon-reload
systemctl restart v2ray
systemctl enable v2ray

nginxconf

nginxwebconf

systemctl restart nginx

installdoh
systemctl daemon-reload
systemctl restart doh-server
systemctl enable doh-server

postinstall
blue "------------------"
blue  "更新de_GWD [完毕]"
blue "------------------"
}



start_menu(){
statusgod=$(green "✔︎") 
statusbad=$(red "✘")

if [[ $(systemctl is-active v2ray) = "active" ]]; then
    echo "[$statusgod] v2ray     进程正常"
elif [[ ! -d "/usr/bin/v2ray" ]]; then
    echo "[$statusbad] v2ray     进程未安装"
else
    echo "[$statusbad] v2ray     进程出错"
fi


if [[ $(systemctl is-active nginx) = "active" ]]; then
    echo "[$statusgod] nginx     进程正常"
elif [[ ! -d "/usr/local/nginx" ]] && [[ ! -d "/etc/nginx" ]]; then
    echo "[$statusbad] nginx     进程未安装"
else
    echo "[$statusbad] nginx     进程出错"
fi


if [[ $(systemctl is-active doh-server) = "active" ]]; then
    echo "[$statusgod] DoH服务端 进程正常"
elif [ ! -d "/usr/local/bin/doh-server" ]; then
    echo "[$statusbad] DoH服务端 进程未安装"
else
    echo "[$statusbad] DoH服务端 进程出错"
fi


if [[ $(systemctl is-active pihole-FTL) = "active" ]]; then
    echo "[$statusgod] pihole    进程正常"
elif [ ! -d "/usr/local/bin/pihole" ]; then
    echo "[$statusbad] pihole    进程未安装"
else
    echo "[$statusbad] pihole    进程出错"
fi

    green "=========================="
    green "   服务端（大力编译版）      "
    green "介绍：一键安装de_GWD        "
    green "系统：仅测于Debian9         "
    green "作者：jacyl4               "
    green "网站：jacyl4.github.io     "
    green "=========================="
    echo
    green  "1. 安装de_GWD"
    green  "2. 安装低延迟内核+南琴浪bbr并重启生效"
    green  "3. 安装bbrplus并重启生效"
    red    "6. 更改静态IP"
    yellow "7. 设置v2ray上级跃点"
    yellow "8. 修改本机UUID&path"
    yellow "9. 更新Pi-hole"
    yellow "0. 更新de_GWD"
    red    "CTRL+C退出"
    echo
    read -p "请输入数字:" num
    case "$num" in
    1)
    installgwd
    start_menu
    ;;
    2)
    installlowlatencybbr
    start_menu
    ;;
    3)
    installbbrplus
    start_menu
    ;;
    6)
    change_staticip
    start_menu 
    ;;
    7)
    modify_upstream
    start_menu 
    ;;
    8)
    change_v2rayverify
    start_menu 
    ;;
    9)
    updatepihole
    start_menu 
    ;;
    0)
    updategwd
    start_menu 
    ;;
    *)
    clear
    red "请输入正确数字"
    sleep 1s
    start_menu
    ;;
    esac
}

start_menu