#!/bin/bash
clear
blue()   { echo -e "\033[34m\033[01m $1 \033[0m"; }
yellow() { echo -e "\033[33m\033[01m $1 \033[0m"; }
green()  { echo -e "\033[32m\033[01m $1 \033[0m"; }
red()    { echo -e "\033[31m\033[01m $1 \033[0m"; }
statusGOOD=$(green "✓")
statusBAD=$(red "✕")
statusNONE=$(yellow "-")
statusInstalled=$(green "[ installed ]")
statuSuccess=$(green "[ OK ]")
statusFailed=$(red "[ failed ]")
export DEBIAN_FRONTEND=noninteractive
de_gwd_nginx="1.19.6"



preUpdate(){
if [[ -f "/etc/nginx/conf.d/supp_head" ]] && [[ -f "/etc/nginx/conf.d/supp_body" ]]; then
mv -f /etc/nginx/conf.d/supp_head /etc/nginx/conf.d/0_top
mv -f /etc/nginx/conf.d/supp_body /etc/nginx/conf.d/3_reverseProxy
rm -f /etc/nginx/conf.d/3_proxyPath
fi

mkdir -p /opt/de_GWD
if [[ -d /usr/local/bin/frp ]]; then
mv -f /usr/local/bin/frp /opt/de_GWD/frp
fi

if [[ -d /usr/local/bin/vtrui ]]; then
mv -f /usr/local/bin/vtrui /opt/de_GWD/vtrui
fi

if [[ -d "/opt/AdGuardHome" ]]; then
  systemctl stop AdGuardHome >/dev/null 2>&1
  rm -rf /etc/systemd/system/AdGuardHome.service
  rm -rf /lib/systemd/system/AdGuardHome.service
  rm -rf /opt/AdGuardHome
  rm -rf /usr/bin/yq
fi


rm -rf /usr/local/bin/autoUpdate
rm -rf /usr/local/bin/iptablesrules*
rm -rf /usr/local/bin/Q2H
rm -rf /usr/local/bin/version.php
rm -rf /usr/local/bin/vtrui

rm -rf /usr/bin/yq
rm -rf /etc/dns-over-https
rm -rf /etc/nginx/conf.d/0_serverUpstream
rm -rf /etc/nginx/conf.d/4_v2Proxy


if [[ -f "/usr/bin/dockerd" ]]; then
docker stop nginx >/dev/null 2>&1
docker rm nginx >/dev/null 2>&1

docker image ls 2>/dev/null | awk '/nginx/{print$3}' | while read line
do
docker rmi $line 2>/dev/null 
done

fi


crontab -l >/tmp/now.cron
sed -i '/\/usr\/local\/bin\/.*/d' /tmp/now.cron
crontab /tmp/now.cron
rm -rf /tmp/now.cron


cd ~
source /etc/profile
service cron stop >/dev/null 2>&1

ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print$2;exit}' | cut -d':' -f1 | cut -d'@' -f1)
localaddr=$(ip a | grep "$ethernetnum" | awk '{print $2}' | awk 'END {print}' | cut -d'/' -f1)

domain=$(awk '/server_name/ {print$2;exit}' /etc/nginx/conf.d/default.conf | sed 's/.$//')
topDomain=$(echo $domain | rev | awk -F. '{print $1"."$2}' | rev)
port=$(awk '/ssl http2 fastopen=128 reuseport/ {print$2}' /etc/nginx/conf.d/default.conf | grep '^[[:digit:]]*$')

v2path=$(jq -r '.inbounds[0].streamSettings.wsSettings.path' /opt/de_GWD/vtrui/config.json)
v2uuids=$(jq -r '.inbounds[0].settings.clients[].id' /opt/de_GWD/vtrui/config.json)

upDomain=$(jq -r '.outbounds[0].settings.vnext[0].address' /opt/de_GWD/vtrui/config.json)
upPort=$(jq -r '.outbounds[0].settings.vnext[0].port' /opt/de_GWD/vtrui/config.json)
upPath=$(jq -r '.outbounds[0].streamSettings.wsSettings.path' /opt/de_GWD/vtrui/config.json)
upUUID=$(jq -r '.outbounds[0].settings.vnext[0].users[0].id' /opt/de_GWD/vtrui/config.json)
}


preInstall(){
if [[ $(free -m | awk 'NR==3{print$2}') = "0" ]]; then
fallocate -l 1G /swapfile
dd if=/dev/zero of=/swapfile bs=1k count=1024k status=progress
chmod 600 /swapfile
mkswap /swapfile
swapon /swapfile
sed -i "/swapfile/d" /etc/fstab
echo "/swapfile swap swap defaults 0 0" >>/etc/fstab
echo "RESUME=" >/etc/initramfs-tools/conf.d/resume
fi

cat << EOF >/etc/dnsmasq.conf
conf-dir=/etc/dnsmasq.d
listen-address=127.0.0.1
port=5353
EOF
pihole restartdns >/dev/null 2>&1

rm -rf /etc/resolv.conf
cat << EOF >/etc/resolv.conf
nameserver 8.8.8.8
nameserver 1.1.1.1
nameserver 8.8.4.4
nameserver 1.0.0.1
EOF

date -s "$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"
hwclock -w

cat << EOF >/etc/apt/apt.conf.d/01InstallLess
APT::Get::Assume-Yes "true";
APT::Install-Recommends "false";
APT::Install-Suggests "false";
EOF

cat << EOF >/etc/apt/apt.conf.d/71debconf
Dpkg::Options {
   "--force-confdef";
   "--force-confold";
};
EOF

cat << EOF >/etc/apt/sources.list
deb http://deb.debian.org/debian buster main contrib non-free
deb http://deb.debian.org/debian buster-updates main contrib non-free
deb http://deb.debian.org/debian buster-backports main contrib non-free
deb http://deb.debian.org/debian-security buster/updates main contrib non-free
EOF

apt update && apt install sudo locales net-tools netcat dnsutils resolvconf wget curl git jq unzip ca-certificates apt-transport-https gnupg2 haveged socat moreutils
source /etc/profile
systemctl enable --now haveged >/dev/null 2>&1

echo "deb https://packages.sury.org/php/ buster main" >/etc/apt/sources.list.d/php.list
curl -fsSL  https://packages.sury.org/php/apt.gpg | apt-key add -

apt update
apt upgrade && apt autoremove && apt autoclean

systemctl mask --now systemd-resolved  >/dev/null 2>&1
systemctl daemon-reload >/dev/null 2>&1
dpkg --configure -a

echo "en_US.UTF-8 UTF-8" >/etc/locale.gen

cat << EOF >/etc/default/locale
LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=en_US.UTF-8
EOF

locale-gen en_US.UTF-8

echo "Asia/Shanghai" >/etc/timezone
ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

cat << EOF >/etc/security/limits.conf
* soft nofile 1000000
* hard nofile 1000000
* soft nproc 64000
* hard nproc 64000
EOF

cat << EOF >~/.bash_profile
ulimit -n 1000000
HISTCONTROL=ignoredups
EOF
source ~/.bash_profile

modprobe ip_conntrack
cat << EOF >/etc/sysctl.conf
vm.overcommit_memory = 1
vm.swappiness = 2
net.unix.max_dgram_qlen = 1024
net.nf_conntrack_max = 1000000
net.netfilter.nf_conntrack_max = 1000000
net.netfilter.nf_conntrack_checksum = 0
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 5
fs.file-max = 1000000
fs.inotify.max_user_instances = 819200
fs.inotify.max_queued_events = 32000
fs.inotify.max_user_watches = 64000
net.core.netdev_max_backlog = 250000
net.core.optmem_max = 4194304
net.core.rmem_max = 4194304
net.core.rmem_default = 4194304
net.core.wmem_max = 4194304
net.core.wmem_default = 4194304
net.core.somaxconn = 65535
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.default.arp_ignore = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.ip_local_port_range = 1024 65535
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_timestamps = 0
net.ipv4.tcp_tw_reuse = 0
net.ipv4.tcp_syncookies = 0
net.ipv4.tcp_fin_timeout = 10
net.ipv4.tcp_orphan_retries = 2
net.ipv4.tcp_syn_retries = 2
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_sack = 1
net.ipv4.tcp_max_syn_backlog = 32768
net.ipv4.tcp_max_tw_buckets = 6000
net.ipv4.tcp_max_orphans = 32768
net.ipv4.tcp_rmem = 4096 87380 4194304
net.ipv4.tcp_wmem = 4096 65536 4194304
net.ipv4.udp_rmem_min = 8192
net.ipv4.udp_wmem_min = 8192
net.ipv4.tcp_keepalive_time = 1800
net.ipv4.tcp_keepalive_intvl = 15
net.ipv4.tcp_keepalive_probes = 5
net.ipv4.tcp_rfc1337 = 1
net.ipv4.tcp_low_latency = 1
net.ipv4.tcp_slow_start_after_idle = 0
EOF

sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf

if [[ $(uname -r) =~ "bbrplus" ]]; then
  echo "net.core.default_qdisc = fq" >>/etc/sysctl.conf
  echo "net.ipv4.tcp_congestion_control = bbrplus" >>/etc/sysctl.conf
else
  echo "net.core.default_qdisc = cake" >>/etc/sysctl.conf
  echo "net.ipv4.tcp_congestion_control = bbr" >>/etc/sysctl.conf
fi
sysctl -p

mkdir -p /opt/de_GWD
}



installIptablesRules(){

cat << EOF >/opt/de_GWD/iptablesrules-up
#!/bin/bash
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -m conntrack --ctstate INVALID -j DROP
iptables -A INPUT -p tcp ! --syn -m conntrack --ctstate NEW -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags SYN,RST SYN,RST -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags FIN,RST FIN,RST -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags FIN,ACK FIN -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ACK,URG URG -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ACK,FIN FIN -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ACK,PSH PSH -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ALL ALL -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ALL NONE -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ALL FIN,PSH,URG -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP

iptables -A INPUT -p udp --dport 53 -s 127.0.0.1,172.17.0.0/24,172.16.66.0/24 -j ACCEPT
iptables -A INPUT -p tcp --dport 53 -s 127.0.0.1,172.17.0.0/24,172.16.66.0/24 -j ACCEPT

iptables -A INPUT -p udp --dport 53 -i $ethernetnum -j DROP
iptables -A INPUT -p tcp --dport 53 -i $ethernetnum -j DROP
EOF

chmod +x /opt/de_GWD/iptablesrules-up

cat << EOF >/opt/de_GWD/iptablesrules-down
#!/bin/bash
iptables -F
iptables -X
EOF

chmod +x /opt/de_GWD/iptablesrules-down

rm -rf /etc/systemd/system/iptablesrules.service
cat << EOF >/lib/systemd/system/iptablesrules.service
[Unit]
Description=iptablesrules
After=network.target

[Service]
User=root
Type=oneshot
ExecStart=/bin/bash /opt/de_GWD/iptablesrules-up
ExecStop=/bin/bash /opt/de_GWD/iptablesrules-down
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload >/dev/null 2>&1
systemctl enable iptablesrules
systemctl restart iptablesrules
}



installPihole(){
piholeRelease=$(curl --silent "https://api.github.com/repos/pi-hole/pi-hole/releases/latest" | jq -r .tag_name)

if [[ $(awk '{print$1}' /etc/pihole/localversions 2>/dev/null | cut -d- -f1) != $piholeRelease ]]; then
rm -rf /etc/.pihole /etc/pihole /opt/pihole /usr/bin/pihole-FTL /usr/local/bin/pihole /var/www/html/pihole /var/www/html/admin
mkdir -p /etc/pihole
>/etc/pihole/adlists.list

cat << EOF >/etc/pihole/setupVars.conf
PIHOLE_INTERFACE=$ethernetnum
IPV4_ADDRESS=$localaddr/24
PIHOLE_DNS_1=8.8.8.8
PIHOLE_DNS_2=1.1.1.1
PIHOLE_DNS_3=8.8.4.4
PIHOLE_DNS_4=1.0.0.1
QUERY_LOGGING=true
INSTALL_WEB_SERVER=false
INSTALL_WEB_INTERFACE=false
LIGHTTPD_ENABLED=false
BLOCKING_ENABLED=true
WEBPASSWORD=0000000000000000000000000000000000000000000000000000000000000000
DNSMASQ_LISTENING=single
DNS_FQDN_REQUIRED=true
DNS_BOGUS_PRIV=true
DNSSEC=false
CONDITIONAL_FORWARDING=false
EOF

git clone https://github.com/pi-hole/pi-hole /etc/.pihole
curl -sSL https://install.pi-hole.net | bash /dev/stdin --unattended
chmod -R 755 /var/www/html
usermod -aG pihole www-data
fi
}



piholeSet(){
systemctl mask --now lighttpd
systemctl mask --now dhcpcd
systemctl daemon-reload >/dev/null 2>&1

cat << EOF >/etc/dnsmasq.conf
conf-dir=/etc/dnsmasq.d
listen-address=127.0.0.1
port=53
EOF

cat << EOF >/etc/pihole/pihole-FTL.conf
PRIVACYLEVEL=0
AAAA_QUERY_ANALYSIS=no
EOF

>/etc/resolvconf/resolv.conf.d/head
>/etc/resolvconf/resolv.conf.d/original
>/etc/resolvconf/resolv.conf.d/tail
rm -rf /etc/resolv.conf
rm -rf /run/resolvconf/interface
echo "nameserver 127.0.0.1" >/etc/resolvconf/resolv.conf.d/base
ln -fs /etc/resolvconf/run/resolv.conf /etc/resolv.conf
resolvconf -u

pihole restartdns
}



installV2ray(){
rm -rf /opt/de_GWD/vtrui
rm -rf /etc/vtrui
mkdir -p /opt/de_GWD/vtrui
wget --no-check-certificate -c -O /tmp/vtrui.zip https://raw.githubusercontent.com/jacyl4/de_GWD/main/resource/amd64_vtrui.zip
rm -rf /tmp/vtrui
unzip /tmp/vtrui.zip -d /tmp/vtrui
cp -f /tmp/vtrui/v2ray /opt/de_GWD/vtrui/vtrui
cp -f /tmp/vtrui/v2ctl /opt/de_GWD/vtrui/v2ctl
cp -f /tmp/vtrui/geoip.dat /opt/de_GWD/vtrui/geoip.dat
chmod +x /opt/de_GWD/vtrui/vtrui
chmod +x /opt/de_GWD/vtrui/v2ctl

cat << EOF >/opt/de_GWD/vtrui/config.json
{
  "dns":{"servers":[{"address":"127.0.0.1","port":53}]},
  "routing":{
    "domainStrategy":"AsIs",
    "rules":[{"type":"field","ip":["geoip:private"],"outboundTag":"block"}]
  },
  "inbounds": [
    {
    "port":11810,
    "listen":"127.0.0.1",
    "protocol":"vmess",
    "settings":{
      "clients":[]
      },
    "streamSettings": {
      "network":"ws",
      "wsSettings":{"path":"/0000"}
      }
    }
  ],
  "outbounds":[]
}
EOF

for uuid in $v2uuids; do
  uuidStr='{"id": "'$uuid'", "level": 1}'
  jq --argjson uuidStr "$uuidStr" '.inbounds[0].settings.clients+=[$uuidStr]' /opt/de_GWD/vtrui/config.json | sponge /opt/de_GWD/vtrui/config.json
done

jq --arg v2path "$v2path" '.inbounds[0].streamSettings.wsSettings.path=$v2path' /opt/de_GWD/vtrui/config.json | sponge /opt/de_GWD/vtrui/config.json

rm -rf /etc/systemd/system/vtrui.service
cat << "EOF" >/lib/systemd/system/vtrui.service
[Unit]
Description=vtrui Service
After=network.target nss-lookup.target

[Service]
User=root
Type=simple
LimitNPROC=64000
LimitNOFILE=1000000
LimitCORE=infinity
NoNewPrivileges=true
AmbientCapabilities=CAP_NET_ADMIN
CapabilityBoundingSet=CAP_NET_RAW CAP_NET_ADMIN CAP_NET_BIND_SERVICE
ExecStart=/opt/de_GWD/vtrui/vtrui -config /opt/de_GWD/vtrui/config.json
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable vtrui
}



v2otUpstream(){
cat << EOF >/tmp/vtruiOB0
    {
      "protocol": "vmess",
      "settings": {
        "vnext": [
          {
            "address": "$upDomain",
            "port": $upPort,
            "users": [
              {
                "id": "$upUUID",
                "security": "auto",
                "level": 1
              }
            ]
          }
        ]
      },
      "streamSettings": {
        "network": "ws",
        "wsSettings": {
          "path": "$upPath"
        },
        "security": "tls",
        "tlsSettings": {
          "serverName": "$upDomain",
          "allowInsecure": false
        }
      }
    }
EOF

jq --slurpfile vtruiOB0 /tmp/vtruiOB0 '.outbounds=$vtruiOB0' /opt/de_GWD/vtrui/config.json |\
jq '.outbounds[1].protocol="blackhole"' |\
jq '.outbounds[1].tag="block"' | sponge /opt/de_GWD/vtrui/config.json

rm -rf /tmp/vtruiOB0
rm -rf /tmp/vtrui*
systemctl restart vtrui
}



v2otDirect(){
jq '.outbounds=[]' /opt/de_GWD/vtrui/config.json |\
jq '.outbounds[0].protocol="freedom"' |\
jq '.outbounds[0].tag="direct"' |\
jq '.outbounds[1].protocol="blackhole"' |\
jq '.outbounds[1].tag="block"' | sponge /opt/de_GWD/vtrui/config.json

rm -rf /tmp/vtrui*
systemctl restart vtrui
}



installNginx(){
if [[ $(nginx -v 2>&1 | grep -o '[0-9.]*$') != $de_gwd_nginx ]] || [[ $(systemctl is-active nginx) != "active" ]]; then

rm -rf /tmp/nginx*
wget --no-check-certificate -c -O /tmp/nginx.zip https://github.com/jacyl4/de_GWD-nginx/releases/download/$de_gwd_nginx/nginx.zip
unzip /tmp/nginx.zip -d /tmp
mv -f /tmp/nginx/nginx_amd64 /usr/sbin/nginx
chmod +x /usr/sbin/nginx
mkdir -p "/etc/nginx/conf.d/"
mv -f /tmp/nginx/conf/* /etc/nginx/
rm -rf /tmp/nginx*

mkdir -p /var/www/html
mkdir -p /var/www/ssl
mkdir -p /var/log/nginx
mkdir -p /var/cache/nginx/client_temp
mkdir -p /var/cache/nginx/proxy_temp
mkdir -p /var/cache/nginx/fastcgi_temp
mkdir -p /var/cache/nginx/scgi_temp
mkdir -p /var/cache/nginx/uwsgi_temp
fi

rm -rf /etc/systemd/system/nginx.service
cat << "EOF" >/lib/systemd/system/nginx.service
[Unit]
Description=The NGINX http and reverse proxy server
After=network.target

[Service]
Type=forking
LimitNPROC=64000
LimitNOFILE=1000000
LimitCORE=infinity
ExecStartPre=/usr/sbin/nginx -t
ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf
ExecReload=/usr/sbin/nginx -s reload
ExecStop=/bin/kill -s QUIT $MAINPID
KillMode=process
ExecStopPost=/bin/rm -f /run/nginx.pid
PIDFile=/run/nginx.pid
PrivateTmp=true
Restart=always
RestartSec=2s

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable --now nginx

rm -rf /etc/nginx/nginx.conf
cat << EOF >/etc/nginx/nginx.conf
user  www-data www-data;
pid   /run/nginx.pid;

worker_processes auto;
worker_rlimit_nofile 100000;

events {
    worker_connections  100000;
    multi_accept on;
    use epoll;
}

http {
  include mime.types;
  default_type application/octet-stream;

  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;
  fastcgi_buffer_size 64k;
  fastcgi_buffers 64 4k;
  fastcgi_busy_buffers_size 128k;
  fastcgi_temp_file_write_size 128k;
  fastcgi_intercept_errors on;

  server_tokens             off;
  sendfile                  on;
  tcp_nodelay               on;
  tcp_nopush                on;

  client_header_timeout     60;
  client_body_timeout       60;
  reset_timedout_connection on;
  types_hash_max_size       2048;

  gzip                      on;
  gzip_disable              "MSIE [1-6]\.";
  gzip_vary                 on;
  gzip_proxied              any;
  gzip_comp_level           4;
  gzip_min_length           256;
  gzip_buffers              16 8k;
  gzip_http_version         1.0;
  gzip_types    text/plain
                text/javascript
                text/css
                text/js
                text/xml
                text/x-component
                text/x-json
                font/opentype
                application/x-font-ttf
                application/javascript
                application/x-javascript
                application/x-web-app-manifest+json
                application/json
                application/atom+xml
                application/xml
                application/xml+rss
                application/xhtml+xml
                application/vnd.ms-fontobject
                image/svg+xml
                image/x-icon;

  brotli                    on;
  brotli_static             on;
  brotli_comp_level         6;
  brotli_buffers            16 8k;
  brotli_min_length         20;
  brotli_window             16m;
  brotli_types              *;

  access_log off;
  error_log off;
  log_not_found off;

  include /etc/nginx/conf.d/*.conf;
}
EOF

rm -rf /opt/de_GWD/doh-server
wget --no-check-certificate -c -O /tmp/doh.zip https://raw.githubusercontent.com/jacyl4/de_GWD-nginx/master/doh/doh_s_amd64.zip
unzip /tmp/doh.zip -d /tmp
mv -f /tmp/doh-server /opt/de_GWD/doh-server
chmod +x /opt/de_GWD/doh-server
rm -rf /tmp/doh*

cat << EOF >/opt/de_GWD/doh-server.conf
listen = [ "127.0.0.1:8053" ]

path = "/dq"

upstream = [ "udp:127.0.0.1:53" ]

timeout = 10
tries = 3
verbose = false
log_guessed_client_ip = false
EOF

mkdir -p /etc/NetworkManager/dispatcher.d

cat << "EOF" > /etc/NetworkManager/dispatcher.d/doh-server
#!/bin/bash
case "$2" in
    up)
        /usr/bin/systemctl is-active doh-server.service >/dev/null && /usr/bin/systemctl restart doh-server.service
        ;;
    down)
        /usr/bin/systemctl is-active doh-server.service >/dev/null && /usr/bin/systemctl restart doh-server.service
        ;;
    *)
        exit 0
        ;;
esac
EOF

chmod +x /etc/NetworkManager/dispatcher.d/doh-server

rm -rf /etc/systemd/system/doh-server.service
cat << "EOF" >/lib/systemd/system/doh-server.service
[Unit]
Description=DNS-over-HTTPS server
After=network.target

[Service]
User=root
Type=simple
LimitNPROC=64000
LimitNOFILE=1000000
LimitCORE=infinity
CapabilityBoundingSet=CAP_NET_RAW CAP_NET_ADMIN
ExecStart=/opt/de_GWD/doh-server -conf /opt/de_GWD/doh-server.conf
Restart=always

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload >/dev/null 2>&1
systemctl enable doh-server
systemctl restart doh-server
}



makeSSL_D(){
crontab -l >/tmp/now.cron
sed -i '/acme.sh/d' /tmp/now.cron
crontab /tmp/now.cron
rm -rf /tmp/now.cron
rm -rf ~/.acme.sh

export CF_Key="$CFapikey"
export CF_Email="$CFemail"

rm -rf /var/www/ssl/*
openssl dhparam -out /var/www/ssl/dhparam.pem 2048

curl https://get.acme.sh | sh
~/.acme.sh/acme.sh --upgrade  --auto-upgrade
~/.acme.sh/acme.sh --issue --dns dns_cf -d $topDomain -d *.$topDomain --keylength ec-256
~/.acme.sh/acme.sh --installcert -d $topDomain --ecc \
               --key-file       /var/www/ssl/$topDomain.key  \
               --fullchain-file /var/www/ssl/$topDomain.cer \
               --reloadcmd     "systemctl reload nginx"
}



makeSSL_W(){
crontab -l >/tmp/now.cron
sed -i '/acme.sh/d' /tmp/now.cron
crontab /tmp/now.cron
rm -rf /tmp/now.cron
rm -rf ~/.acme.sh

rm -rf /etc/nginx/conf.d/default.conf
cat << EOF >/etc/nginx/conf.d/default.conf
server {
    listen      80;
    server_name $domain;
    root        /var/www/html;
    index       index.php index.html index.htm;
}
EOF
systemctl reload nginx

rm -rf /var/www/ssl/*
openssl dhparam -out /var/www/ssl/dhparam.pem 2048

curl https://get.acme.sh | sh
~/.acme.sh/acme.sh --upgrade  --auto-upgrade
~/.acme.sh/acme.sh --issue -d $domain -w /var/www/html --keylength ec-256
~/.acme.sh/acme.sh --installcert -d $domain --ecc \
               --key-file       /var/www/ssl/$domain.key  \
               --fullchain-file /var/www/ssl/$domain.cer \
               --reloadcmd     "systemctl reload nginx"
}


ocspStapling(){
cat << EOF >/var/www/ssl/update_ocsp_cache
#!/bin/bash
wget --no-check-certificate -O /var/www/ssl/intermediate.pem https://letsencrypt.org/certs/lets-encrypt-r3-cross-signed.pem
wget --no-check-certificate -O /var/www/ssl/root.pem https://letsencrypt.org/certs/isrgrootx1.pem
cat /var/www/ssl/intermediate.pem >/var/www/ssl/bundle.pem
cat /var/www/ssl/root.pem >>/var/www/ssl/bundle.pem

openssl ocsp -no_nonce \
    -issuer  /var/www/ssl/intermediate.pem \
    -cert    /var/www/ssl/*.cer \
    -CAfile  /var/www/ssl/bundle.pem \
    -VAfile  /var/www/ssl/bundle.pem \
    -url     http://r3.o.lencr.org \
    -respout /var/www/ssl/ocsp.resp

systemctl reload nginx
EOF

chmod +x /var/www/ssl/update_ocsp_cache
/var/www/ssl/update_ocsp_cache

crontab -l >/tmp/now.cron
sed -i '/update_ocsp_cache/d' /tmp/now.cron
echo '0 0 * * 6 /var/www/ssl/update_ocsp_cache' >>/tmp/now.cron
crontab /tmp/now.cron
rm -rf /tmp/now.cron
}



nginxWebConf(){
touch /etc/nginx/conf.d/0_top

if [[ -n $port ]] && [[ $port != "443" ]]; then

cat << EOF >/etc/nginx/conf.d/1_serverHead
server {
  listen $port quic reuseport;
  listen $port ssl http2 fastopen=128 reuseport;
  server_name $domain;
  root /var/www/html;
  index index.php index.html index.htm;

  ssl_certificate /var/www/ssl/$topDomain.cer;
  ssl_certificate_key /var/www/ssl/$topDomain.key;

  add_header alt-svc 'quic=":$port"; h3-27=":$port"; h3-25=":$port"; h3-T050=":$port"; h3-Q050=":$port"; h3-Q049=":$port"; h3-Q048=":$port"; h3-Q046=":$port"; h3-Q043=":$port"; ma=86400';
EOF

else

cat << EOF >/etc/nginx/conf.d/1_serverHead
server {
  listen 80;
  server_name $domain;
  return 301 https://\$server_name\$request_uri;
}

server {
  listen 443 quic reuseport;
  listen 443 ssl http2 fastopen=128 reuseport;
  server_name $domain;
  root /var/www/html;
  index index.php index.html index.htm;

  ssl_certificate /var/www/ssl/$domain.cer;
  ssl_certificate_key /var/www/ssl/$domain.key;

  add_header alt-svc 'quic=":443"; h3-27=":443"; h3-25=":443"; h3-T050=":443"; h3-Q050=":443"; h3-Q049=":443"; h3-Q048=":443"; h3-Q046=":443"; h3-Q043=":443"; ma=86400';
EOF

fi

cat << EOF >/etc/nginx/conf.d/2_tlsParameter
  ssl_dhparam /var/www/ssl/dhparam.pem;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  ssl_ciphers TLS13+AESGCM+AES128:TLS13+AESGCM+AES256:TLS13+CHACHA20:EECDH+ECDSA+AESGCM+AES128:EECDH+ECDSA+CHACHA20:EECDH+ECDSA+AESGCM+AES256:EECDH+ECDSA+AES128+SHA:EECDH+ECDSA+AES256+SHA:EECDH+aRSA+AESGCM+AES128:EECDH+aRSA+CHACHA20:EECDH+aRSA+AESGCM+AES256:EECDH+aRSA+AES128+SHA:EECDH+aRSA+AES256+SHA:RSA+AES128+SHA:RSA+AES256+SHA:RSA+3DES;
  ssl_session_timeout 10m;
  ssl_session_cache builtin:1000 shared:SSL:10m;
  ssl_buffer_size 4k;

  ssl_early_data on;
  proxy_set_header Early-Data \$ssl_early_data;

  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_stapling_file /var/www/ssl/ocsp.resp;
  
  add_header Referrer-Policy                    "no-referrer"       always;
  add_header X-Content-Type-Options             "nosniff"           always;
  add_header X-Download-Options                 "noopen"            always;
  add_header X-Frame-Options                    "SAMEORIGIN"        always;
  add_header X-Permitted-Cross-Domain-Policies  "none"              always;
  add_header X-Robots-Tag                       "none"              always;
  add_header X-XSS-Protection                   "1; mode=block"     always;
  add_header Strict-Transport-Security          "max-age=63072000"  always;

EOF

touch /etc/nginx/conf.d/3_reverseProxy

cat << EOF >/etc/nginx/conf.d/4_end
location ~ /\.(?!well-known).* {
  deny all;
}

location /dq {
  proxy_pass                http://127.0.0.1:8053/dq;
  proxy_set_header          Host \$host;
  proxy_set_header          X-Real-IP \$remote_addr;
  proxy_redirect            off;
  keepalive_requests        25600;
  keepalive_timeout         300 300;
  proxy_buffering           off;
  proxy_buffer_size         8k;
}

location $v2path {
  proxy_pass                http://127.0.0.1:11810;
  proxy_http_version        1.1;
  proxy_set_header          Host \$http_host;
  proxy_set_header          Upgrade "WebSocket";
  proxy_set_header          Connection "upgrade";
  proxy_set_header          X-Real-IP \$remote_addr;
  proxy_set_header          X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_redirect            off;
  keepalive_requests        25600;
  keepalive_timeout         300 300;
  proxy_buffering           off;
  proxy_buffer_size         8k;
}
}
EOF

cat << EOF >/etc/nginx/conf.d/merge.sh
#!/bin/bash
rm -rf /etc/nginx/conf.d/default.conf

cat /etc/nginx/conf.d/0_top >/etc/nginx/conf.d/default.conf
cat /etc/nginx/conf.d/1_serverHead >>/etc/nginx/conf.d/default.conf
cat /etc/nginx/conf.d/2_tlsParameter >>/etc/nginx/conf.d/default.conf
cat /etc/nginx/conf.d/3_reverseProxy >>/etc/nginx/conf.d/default.conf
cat /etc/nginx/conf.d/4_end >>/etc/nginx/conf.d/default.conf

systemctl reload nginx
EOF

chmod +x /etc/nginx/conf.d/merge.sh
/etc/nginx/conf.d/merge.sh
}



postInstall(){
indexpage=$(ls /var/www/html/index.* 2>/dev/null | wc -l)
if [ "$indexpage" = "0" ]; then 
wget --no-check-certificate -c -O /tmp/sample.zip https://raw.githubusercontent.com/jacyl4/de_GWD/main/resource/sample.zip
unzip /tmp/sample.zip -d /tmp
cp -rf /tmp/sample/* /var/www/html/
rm -rf /tmp/sample*
fi

rm -rf /opt/de_GWD/version.php
wget --no-check-certificate -c -O /opt/de_GWD/version.php https://raw.githubusercontent.com/jacyl4/de_GWD/main/version.php

if [[ $(ls -l /var/www/html/spt 2>/dev/null | awk '{print$5}') != "104857600" ]]; then
  dd if=/dev/zero of=/var/www/html/spt bs=1k count=100k status=progress
fi

cat << "EOF" >/opt/de_GWD/autoUpdate
#!/bin/bash
wget --no-check-certificate -c -O ~/update https://raw.githubusercontent.com/jacyl4/de_GWD/main/server
sed -i '$d' ~/update
echo "updateGWD" >>  ~/update
chmod +x ~/update
~/update

crontab -l > ~/now.cron
sed -i '/autoUpdate/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
rm -rf ~/update
EOF

chmod +x /opt/de_GWD/autoUpdate

cat << "EOF" >/opt/de_GWD/Q2H
#!/bin/bash
date -s "$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"
hwclock -w

rm -rf ~/server*
rm -rf /var/log/*1
rm -rf /var/log/*2
rm -rf /var/log/*gz

localVer=$(awk 'NR==1' /opt/de_GWD/version.php)
remoteVer=$(curl -s https://raw.githubusercontent.com/jacyl4/de_GWD/main/version.php | awk 'NR==1')

if [[ $localVer != $remoteVer ]]; then
crontab -l > ~/now.cron
sed -i '/autoUpdate/d' ~/now.cron
echo '30 4 * * *  /opt/de_GWD/autoUpdate' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
fi
EOF

chmod +x /opt/de_GWD/Q2H
/opt/de_GWD/Q2H

crontab -l >/tmp/now.cron
sed -i '/\/opt\/de_GWD\/Q2H/d' /tmp/now.cron
echo '0 */2 * * * /opt/de_GWD/Q2H' >>/tmp/now.cron
crontab /tmp/now.cron
rm -rf /tmp/now.cron
service cron restart >/dev/null 2>&1
}




installGWD(){
    green "=================="
    green " Input VPS domain"
    green "=================="
    read vpsdomainP

domain=$(echo $vpsdomainP | cut -d: -f1)
topDomain=$(echo $domain | rev | awk -F. '{print $1"."$2}' | rev)
port=$(echo $vpsdomainP | cut -d: -f2| grep '^[[:digit:]]*$')
[ -z $port ] && port="443"

if [[ -n $port ]] && [[ $port != "443" ]]; then

    green "==============================="
    green " Cloudflare API KEY"
    green "==============================="
    read CFapikey

    green "==============================="
    green " Cloudflare Email"
    green "==============================="
    read CFemail

fi

cd ~

v2uuids=$(cat /proc/sys/kernel/random/uuid)
v2path="/$(echo $v2uuids | awk '{print substr($0,length($1)-5)}')"

ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print $2}' | cut -d':' -f1 | cut -d'@' -f1 | awk 'NR==1{print}')
localaddr=$(ip a | grep "$ethernetnum" | awk '{print $2}' | awk 'END {print}' | cut -d'/' -f1)
gatewayaddr=$(ip route show | awk '/'$ethernetnum'/ {print$3;exit}')

cat << EOF >/etc/network/interfaces
source /etc/network/interfaces.d/*

auto lo
iface lo inet loopback

auto $ethernetnum
iface $ethernetnum inet static
  address $localaddr
  netmask 255.255.255.0
  gateway $gatewayaddr
EOF

preInstall

installIptablesRules

installPihole

piholeSet

installV2ray

v2otDirect

if [[ -n $port ]] && [[ $port != "443" ]]; then

installNginx

makeSSL_D

ocspStapling

nginxWebConf

else

installNginx

makeSSL_W

ocspStapling

nginxWebConf

fi

postInstall

blue "---------------------------------------------"
blue  "Install de_GWD [done]"
echo ""
blue "DoH:    $(yellow "$vpsdomainP/dq")"
blue "Domain: $(yellow "$vpsdomainP")"
blue "PATH:   $(yellow "$v2path")"
blue "UUID:   $(yellow "$v2uuids")"
blue "---------------------------------------------"
}



installBBRplus(){
    green "================"
    green "Install bbrplus"
    green "================"
    green  "Y. Install"
    read BBRplusConfirm

if [[ "$BBRplusConfirm" = "Y" ]] || [[ "$BBRplusConfirm" = "y" ]]; then

if [[ $(uname -m) == "aarch64" ]]; then
  red "only work on x86_64"
elif [[ $(uname -m) == "x86_64" ]]; then
apt install -y wget
mkdir -p ~/bbrkernel && cd ~/bbrkernel
wget --no-check-certificate -c -O ~/bbrkernel/linux-headers.deb https://raw.githubusercontent.com/jacyl4/de_GWD/main/resource/linux-headers-4.14.168-bbrplus_4.14.168-bbrplus-buster_amd64.deb
wget --no-check-certificate -c -O ~/bbrkernel/linux-image.deb https://raw.githubusercontent.com/jacyl4/de_GWD/main/resource/linux-image-4.14.168-bbrplus_4.14.168-bbrplus-buster_amd64.deb

if [[ $(ls -l ~/bbrkernel/linux-headers.deb | awk '{print$5}') -gt 11265000 ]] && [[ $(ls -l ~/bbrkernel/linux-image.deb | awk '{print$5}') -gt 44341000 ]]; then
dpkg -i linux-headers.deb
dpkg -i linux-image.deb

dpkg --list | grep linux-image | awk '{print $2}' | sed '/bbrplus/d' | while read line
do
apt purge -y $line
done

update-grub

cat << EOF >~/bbrkernel/clearkernel
#!/bin/bash
PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i "/net.ipv4.tcp_congestion_control/d" /etc/sysctl.conf
echo "net.core.default_qdisc = fq" >>/etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbrplus" >>/etc/sysctl.conf
sysctl -p
crontab -l > ~/now.cron
sed -i '/clearkernel/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
rm -rf ~/bbrkernel
systemctl restart sshd
EOF

chmod +x ~/bbrkernel/clearkernel

crontab -l > ~/now.cron
echo '@reboot ~/bbrkernel/clearkernel' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron

reboot

else
    red "Kernel download failed"

    exit
fi
fi
fi
blue "-----------------------"
blue  "Install bbrplus [done]"
blue "-----------------------"
}



installBBR(){
    green "=========================="
    green "Install latest kernel BBR"
    green "=========================="
    green  "Y. Install"
    read BBRconfirm

if [[ "$BBRconfirm" = "Y" ]] || [[ "$BBRconfirm" = "y" ]]; then

if [[ $(uname -m) == "aarch64" ]]; then
  red "only work on x86_64"
elif [[ $(uname -m) == "x86_64" ]]; then
apt install -y wget
mkdir -p ~/bbrkernel && cd ~/bbrkernel
wget --no-check-certificate -c -O ~/bbrkernel/linux-headers.deb https://raw.githubusercontent.com/jacyl4/de_GWD/main/resource/linux-headers-buster_amd64.deb
wget --no-check-certificate -c -O ~/bbrkernel/linux-image.deb https://raw.githubusercontent.com/jacyl4/de_GWD/main/resource/linux-image-buster_amd64.deb

if [[ $(ls -l ~/bbrkernel/linux-headers.deb | awk '{print$5}') -gt 7665000 ]] && [[ $(ls -l ~/bbrkernel/linux-image.deb | awk '{print$5}') -gt 45981000 ]]; then
dpkg -i linux-headers.deb
dpkg -i linux-image.deb

dpkg --list | grep linux-image | awk '{print $2}' | sed '/5.7.7/d' | sed '/5.6.15/d' | while read line
do
apt purge -y $line
done

update-grub

cat << EOF >~/bbrkernel/clearkernel
#!/bin/bash
PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i "/net.ipv4.tcp_congestion_control/d" /etc/sysctl.conf
echo "net.core.default_qdisc = cake" >>/etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbr" >>/etc/sysctl.conf
sysctl -p
crontab -l > ~/now.cron
sed -i '/clearkernel/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
rm -rf ~/bbrkernel
systemctl restart sshd
EOF

chmod +x ~/bbrkernel/clearkernel

crontab -l > ~/now.cron
echo '@reboot ~/bbrkernel/clearkernel' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron

reboot

else
    red "Kernel download failed"

    exit
fi
fi
fi
blue "--------------------------------"
blue "Install latest kernel BBR [done]"
blue "--------------------------------"
}



changeStaticIP(){
    green "========="
    green "Address"
    green "========="
    read localaddr

    green "========="
    green "Gateway"
    green "========="
    read gatewayaddr

sed -i "/address/c\address $localaddr"  /etc/network/interfaces
sed -i "/gateway/c\gateway $gatewayaddr"  /etc/network/interfaces
sed -i "/IPV4_ADDRESS=/c\IPV4_ADDRESS=$localaddr/24"  /etc/pihole/setupVars.conf

reboot
blue "-----------------"
blue  "Change IP [done]"
blue "-----------------"
}



changeDomain(){
    green "=================="
    green " Input new domain"
    green "=================="
    read vpsdomainP

domain=$(echo $vpsdomainP | cut -d: -f1)
topDomain=$(echo $domain | rev | awk -F. '{print $1"."$2}' | rev)
port=$(echo $vpsdomainP | cut -d: -f2| grep '^[[:digit:]]*$')
[ -z $port ] && port="443"

if [[ -n $port ]] && [[ $port != "443" ]]; then

    green "==============================="
    green " Cloudflare API KEY"
    green "==============================="
    read CFapikey

    green "==============================="
    green " Cloudflare Email"
    green "==============================="
    read CFemail

fi

v2path=$(jq -r '.inbounds[0].streamSettings.wsSettings.path' /opt/de_GWD/vtrui/config.json)

if [[ -n $port ]] && [[ $port != "443" ]]; then
makeSSL_D

ocspStapling
else
makeSSL_W

ocspStapling
fi

nginxWebConf

blue "-----------------------------------------------"
blue "Change domain and issue new certificates [done]"
blue "-----------------------------------------------"
}



changeV2rayVerify(){
    green "=========="
    green " New path"
    green "=========="
    read npath

    green "=========="
    green " New UUID"
    green "=========="
    read nuuid

sed -i "$(sed -ne '/location/=' /etc/nginx/conf.d/default.conf | awk 'END{print}')s/.*/location "'\'$npath''" {/" /etc/nginx/conf.d/default.conf

systemctl reload nginx

jq --arg npath "$npath" '.inbounds[0].streamSettings.wsSettings.path=$npath' /opt/de_GWD/vtrui/config.json |\
jq --arg nuuid "$nuuid" '.inbounds[0].settings.clients[0].id=$nuuid' | sponge /opt/de_GWD/vtrui/config.json

systemctl restart vtrui
blue "------------------------------"
blue  "Change v2ray UUID&path [done]"
blue "------------------------------"
}



changev2rayupstream(){
    green "==================================================="
    green "Y. Change v2ray upstream / N. Delete v2ray upstream"
    green "==================================================="
    read v2UpStreamYN

if [[ "$v2UpStreamYN" = "Y" ]] || [[ "$v2UpStreamYN" = "y" ]]; then

    green "======================"
    green "v2ray upstream domain"
    green "======================"
    read upDomainP

    green "======================"
    green "v2ray upstream path"
    green "======================"
    read upPath

    green "======================"
    green "v2ray upstream UUID"
    green "======================"
    read upUUID

upDomain=$(echo $upDomainP | cut -d: -f1)
upPort=$(echo $upDomainP | cut -d: -f2 | grep '^[[:digit:]]*$')
[ -z $upPort ] && upPort="443"

v2otUpstream

blue "-----------------------------"
blue  "Change v2ray upstream [done]"
blue "-----------------------------"

elif [[ "$v2UpStreamYN" = "N" ]] || [[ "$v2UpStreamYN" = "n" ]]; then

v2otDirect

blue "-----------------------------"
blue  "Delete v2ray upstream [done]"
blue "-----------------------------"
fi
}



updateGWD(){
[ ! -f /opt/de_GWD/version.php ] && red "this is not server" && exit

preUpdate

preInstall

installIptablesRules

installPihole

piholeSet

installV2ray

if [[ -n $upDomain ]] && [[ $upDomain != null ]]; then
  v2otUpstream
else
  v2otDirect
fi

installNginx

nginxWebConf

postInstall

blue "---------------------"
blue  "Update de_GWD [done]"
blue "---------------------"
}



printNode(){
vpsdomain=$(awk '/server_name/ {print$2;exit}' /etc/nginx/conf.d/default.conf | sed 's/.$//')
port=$(awk '/ssl http2 fastopen=128 reuseport/ {print$2}' /etc/nginx/conf.d/default.conf)

if [[ $port = "443" ]]; then
vpsdomainP=$vpsdomain
else
vpsdomainP=$vpsdomain:$port
fi

v2path=$(jq -r '.inbounds[0].streamSettings.wsSettings.path' /opt/de_GWD/vtrui/config.json)
v2uuids=$(jq -r '.inbounds[0].settings.clients[].id' /opt/de_GWD/vtrui/config.json)

blue "---------------------------------------------"
green "V2ray node information"
echo ""
blue "DoH:    $(yellow "$vpsdomainP/dq")"
blue "Domain: $(yellow "$vpsdomainP")"
blue "UUID:   $(yellow "$v2uuids")"
blue "PATH:   $(yellow "$v2path")"
blue "---------------------------------------------"
}



autoUpdateGWD(){
    green "=============================================="
    green "Y. Turn on AutoUpdate / N. Turn off AutoUpdate"
    green "=============================================="
    read autoUpdateswitch

if [[ "$autoUpdateswitch" = "Y" ]] || [[ "$autoUpdateswitch" = "y" ]]; then 
sed -i '/localVer=/,$d' /opt/de_GWD/Q2H

cat << "EOF" >>/opt/de_GWD/Q2H
localVer=$(awk 'NR==1' /opt/de_GWD/version.php)
remoteVer=$(curl -s https://raw.githubusercontent.com/jacyl4/de_GWD/main/version.php | awk 'NR==1')

if [[ $localVer != $remoteVer ]]; then
crontab -l > ~/now.cron
sed -i '/autoUpdate/d' ~/now.cron
echo '30 4 * * *  /opt/de_GWD/autoUpdate' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
fi
EOF

blue "--------------------------"
blue  "AutoUpdate turn on [done]"
blue "--------------------------"

elif [[ "$autoUpdateswitch" = "N" ]] || [[ "$autoUpdateswitch" = "n" ]]; then
sed -i '/localVer=/,$d' /opt/de_GWD/Q2H

crontab -l > ~/now.cron
sed -i '/autoUpdate/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron

blue "---------------------------"
blue  "AutoUpdate turn off [done]"
blue "---------------------------"
fi
}



start_menu(){
if [[ $(systemctl is-active pihole-FTL) = "active" ]]; then
    echo "[$statusGOOD] Pi-hole        [working]"
elif [ ! -f "/usr/local/bin/pihole" ]; then
    echo "[$statusBAD] Pi-hole        [not installed]"
else
    echo "[$statusBAD] Pi-hole        [start failed]"
fi

if [[ $(systemctl is-active vtrui) = "active" ]]; then
    echo "[$statusGOOD] V2RAY          [working]"
elif [[ ! -d "/opt/de_GWD/vtrui" ]]; then
    echo "[$statusBAD] V2RAY          [not Installed]"
else
    echo "[$statusBAD] V2RAY          [start failed]"
fi

if [[ $(systemctl is-active nginx) = "active" ]]; then
    echo "[$statusGOOD] Nginx          [working]"
elif [[ ! -f "/usr/sbin/nginx" ]]; then
    echo "[$statusBAD] Nginx          [not installed]"
else
    echo "[$statusBAD] Nginx          [start failed]"
fi

if [[ $(systemctl is-active doh-server) = "active" ]]; then
    echo "[$statusGOOD] DoH server     [working]"
elif [[ ! -f "/opt/de_GWD/doh-server" ]]; then
    echo "[$statusBAD] DoH server     [not Installed]"
else
    echo "[$statusBAD] DoH server     [start failed]"
fi

blue "-----------------------------------------------"
blue "Kernel ：$(uname -r)"
blue "Current tcp congestion control ：$(sysctl net.ipv4.tcp_congestion_control 2>/dev/null | cut -d' ' -f3) + $(sysctl net.core.default_qdisc 2>/dev/null | cut -d' ' -f3)"
blue "-----------------------------------------------"

    green "==========================="
    green "       SERVER"
    green "Recommend: Debian 10"
    green "Author:    JacyL4"
    green "==========================="
if [[ -f "/opt/de_GWD/version.php" ]]; then
    blue  "Version:$(echo $(awk 'NR==1' /opt/de_GWD/version.php))"
fi
    echo ""
    green  "1. Install de_GWD"
    green  "2. Install bbrplus+fq and reboot"
    green  "3. Install latest kernel BBR and reboot"
    red    "4. Change domain and generate new certificate"
    red    "5. Change v2ray path & UUID"
    red    "6. Change static IP"
    yellow "7. Set v2ray upsteram"
    yellow "0. Update de_GWD"
    green  "11.Print v2ray node information"
    red    "00.AutoUpdate turn on/off"
    red    "CTRL+C EXIT"
    echo ""
    read -p "Select:" num
    case "$num" in
    1)
    installGWD
    start_menu
    ;;
    2)
    installBBRplus
    start_menu
    ;;
    3)
    installBBR
    start_menu
    ;;
    4)
    changeDomain
    start_menu
    ;;
    5)
    changeV2rayVerify
    start_menu
    ;;
    6)
    changeStaticIP
    start_menu
    ;;
    7)
    changev2rayupstream
    start_menu
    ;;
    0)
    updateGWD
    start_menu
    ;;
    11)
    printNode
    start_menu
    ;;
    00)
    autoUpdateGWD
    start_menu
    ;;
    *)
    clear
    red "Wrong number"
    sleep 1s
    start_menu
    ;;
    esac
}

start_menu
